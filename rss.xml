<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rebeja</title><link>https://rebeja.eu/</link><description>Single threaded stories.</description><atom:link href="https://rebeja.eu/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:petru.rebeja@gmail.com"&gt;Petru Rebeja&lt;/a&gt; </copyright><lastBuildDate>Mon, 16 Sep 2019 03:55:21 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Declutter the way of working</title><link>https://rebeja.eu/posts/declutter-the-way-of-working/</link><dc:creator>Petru Rebeja</dc:creator><description>&lt;p&gt;
Like many other people I strive to be as productive as I can. Being productive means two things for me:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Getting the most out of my tools and,&lt;/li&gt;
&lt;li&gt;Spending less time on useless things.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Getting the most of my tools is the reason I continuously invest in learning &lt;a href="https://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; (which has proven to have a great return of investment) and in learning &lt;a href="http://visualstudioshortcuts.com/2017/"&gt;Visual Studio shortcuts.&lt;/a&gt; It was for the same reason I was happy like a kid with a chocolate bar when Visual Studio introduced the &lt;code&gt;Ctrl+Q&lt;/code&gt; shortcut for the &lt;code&gt;Quick Launch&lt;/code&gt; menu which allowed me to launch various utilities from Visual Studio without bothering to learn shortcuts that aren't often used and without spending time navigating through the menu items looking for the one I had in mind.
&lt;/p&gt;

&lt;p&gt;
Spending less time on useless things means having a good workflow and &lt;i&gt;I was not happy with mine&lt;/i&gt;. And my workflow was quite simple — after getting to work, I would start my workstation, open Outlook and whatever instant messaging applications I needed to use, open Visual Studio, get latest sources from TFS, open required solutions and start coding. In between any of those steps I would make myself a cup of tea from which I would sip occasionally while working. It took me some time to do all those required steps before being able to actually read, write or debug some piece of code and albeit in time I got ahold of more powerful machines which loaded things faster, I wasn't happy with the sensation of &lt;i&gt;having to wait to start working&lt;/i&gt;.
&lt;/p&gt;

&lt;p&gt;
I started thinking on how to avoid waiting and I turned to the simplest solution for my problem — for every application that I needed to start at the beginning of the day I would put a shortcut in the Windows startup folder. This way, after getting to work I needed to boot my computer, log in and go make the tea while the applications were loading automatically. I couldn't load &lt;i&gt;all&lt;/i&gt; the required applications that way — most of the time I needed to run Visual Studio with elevated permissions which halted the load of other applications due to the UAC settings — but I was happy to open all other applications automatically while making my tea and open Visual Studio manually.
&lt;/p&gt;

&lt;p&gt;
Meanwhile I switched the workstation with a laptop and got the opportunity to work on a data science project at work, alongside the main project I'm assigned to. Having a laptop brings a great deal of flexibility and having a high-performance laptop with great battery life tends to make me want to work on it for &lt;i&gt;all&lt;/i&gt; my projects.
&lt;/p&gt;

&lt;p&gt;
And that's when things started to get complicated workflow-wise. The two projects I work on at my job have different technology stacks (&lt;code&gt;C#&lt;/code&gt; with &lt;code&gt;.net core&lt;/code&gt; on the main project and &lt;code&gt;Python&lt;/code&gt; with &lt;code&gt;Azure ML&lt;/code&gt; for the data science one) which means different workflows but still using the same applications for communication and other secondary tasks. In my spare time — early in the morning or late at night — I work on personal projects and that's when I feel the most infuriated with the plethora of applications that are starting automatically but are totally useless at that moment and do nothing more than consume resources.
&lt;/p&gt;

&lt;p&gt;
At some point I realized that the time I used to spend a while ago to open the applications I needed, I now waste on closing the applications which are configured to start automatically but are of no use to me. Then I remembered that a while ago I read a &lt;a href="https://bash.im/quote/436725"&gt;story about Russian DevOps engineer who would automate a task if it required more that 1.5 minutes of his time&lt;/a&gt; (the English version and implementations of the scripts are available on &lt;a href="https://github.com/NARKOZ/hacker-scripts"&gt;GitHub&lt;/a&gt;). That story got me thinking:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Can I change which applications are loaded automatically based on the project I'm working?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Unfortunately, the answer is &lt;b&gt;no&lt;/b&gt;. That's because my laptop won't know on which project I'll be working next. But my schedule might give a hint: all week except Thursday, from 9:00 to 18:00 I work on the main project at my job, on Thursdays from 9:00 to 18:00 I work on a secondary project and outside business hours I work on my other projects.
&lt;/p&gt;

&lt;p&gt;
OK, and how do I use that information? Up until now I used to place shortcuts in Windows startup folder but that doesn't do it for me anymore. The problem with placing shortcuts in Windows startup folder is that there's no way to specify &lt;i&gt;when&lt;/i&gt; to start the application — it will start all the time.
&lt;/p&gt;

&lt;p&gt;
So I had to look elsewhere for a solution. The next place I looked was Windows Task Scheduler which provides more options for starting a task but unfortunately the triggers of Task Scheduler are either too simple to encode the ranges from my schedule or too complicated to bother with.
&lt;/p&gt;

&lt;p&gt;
Thinking of how to make this decision simple I turned to PowerShell. I created two scripts, in each of them testing the following conditions:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Is current time between 9:00 and 18:00 and current day is a work day but not Thursday? If yes, then this means I'm at my job, working for the main project and thus:
&lt;ul class="org-ul"&gt;
&lt;li&gt;The first script will:
&lt;ul class="org-ul"&gt;
&lt;li&gt;navigate to the directory mapped to TFS project,&lt;/li&gt;
&lt;li&gt;get latest version and&lt;/li&gt;
&lt;li&gt;open the solution in Visual Studio.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The second script will load other work-related applications like Outlook, MS Teams etc.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Is current day Thursday and time is between 9:00 and 18:00? If yes, then I'm at my job working on the data science project and:
&lt;ul class="org-ul"&gt;
&lt;li&gt;The first script will open &lt;code&gt;Ubuntu bash&lt;/code&gt; from &lt;code&gt;WSL&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The second script will open the &lt;code&gt;Azure ML workspace&lt;/code&gt; in a browser.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Each of these scripts is invoked by Windows Task Scheduler at logon; the only difference being that the first one is executed with elevated privileges. I still need to run Visual Studio as administrator and by running the script with highest privileges I don't get the UAC dialog anymore.
&lt;/p&gt;

&lt;p&gt;
None of the aforementioned scripts do anything outside working hours — in that period I choose on which project to work based on what I feel like doing (to keep me engaged after a day at work) and various other factors. But the fact that, in those late or early hours I don't need to close some pesky little applications that keep distracting me, makes me be happy again with my workflow.
&lt;/p&gt;</description><guid>https://rebeja.eu/posts/declutter-the-way-of-working/</guid><pubDate>Thu, 12 Sep 2019 15:25:23 GMT</pubDate></item><item><title>EUROLAN 2019 Summer School</title><link>https://rebeja.eu/posts/eurolan-2019/</link><dc:creator>Petru Rebeja</dc:creator><description>&lt;p&gt;
I started drafting this post in the last day of &lt;a href="http://eurolan.info.uaic.ro/2019/index.html"&gt;EUROLAN 2019 Summer School&lt;/a&gt;; while the participants were about to take the last &lt;a href="https://kahoot.it/"&gt;Kahoot!&lt;/a&gt; quiz and fill the feedback form.
&lt;/p&gt;

&lt;p&gt;
This was the first summer school where I was on the other side — in the organization committee and I have to admit that I liked it very much.
&lt;/p&gt;

&lt;p&gt;
I liked the joy and enthusiasm of the participants which were as if they embarked for an adventure. Is some sense, this was an adventure for them, which could be seen from their attitude for handling the exercices — each task was tackled with maximum involvment and seriosity by everyone.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://rebeja.eu/images/eurolan2019.jpg" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
The exercices were meant to cover a wide range of activities for computational linguistics — from manually annotating a small corpus of trainig phrases to training a machine learning model.
&lt;/p&gt;

&lt;p&gt;
The mission of our micro-team (&lt;a href="https://github.com/tiberiu44"&gt;Tiberiu Boroș&lt;/a&gt;, &lt;a href="https://github.com/cristian904"&gt;Cristian Pădurariu&lt;/a&gt; and myself) was to teach the participants how to train a Machine Learning model using &lt;a href="https://github.com/adobe/NLP-Cube"&gt;NLP-Cube&lt;/a&gt; - a Natural Language Processing Framework where Tiberiu is the main contributor.
&lt;/p&gt;

&lt;p&gt;
Knowing that there will be participants with both Windows and Mac OS, we settled in our discussions on enclosing &lt;a href="https://github.com/RePierre/eurolan-2019"&gt;&lt;code&gt;NLP-Cube&lt;/code&gt; into a Docker image&lt;/a&gt; which would be built by each participant in order to train the model.
&lt;/p&gt;

&lt;p&gt;
Unfortunately, despite our best efforts and the great presentation made by Tiberiu the results were disastrous — the laptops of over a half of participants didn't met Docker requirements; from the reamaining people a lot did not have enough disk space for the various transformations of the corpus and additional utilities. Overall, only a few persons were able to start the training process.
&lt;/p&gt;

&lt;p&gt;
At the end of the school, the organization committee setup a small contest with for the participants: each team would have to come up with an idea of an application and after refining the idea they would get exactly 5 minutes to pitch the idea to the ad-hoc jury. The application was subject to the constraints of being somewhat feasible to develop and should use as many topics taught during the summer school as possible.
&lt;/p&gt;

&lt;p&gt;
The ideas were great; the one that I liked the most was about an application that would do speech recognition for people suffering from some form of heavy speech impediment.
&lt;/p&gt;

&lt;p&gt;
When a part of the jury went to deliberate over which team should get which prize, &lt;a href="https://www.facebook.com/gabihaja"&gt;Gabriela Haja&lt;/a&gt; started the closing speech. It was a simple, elegant and beautifull talk where she praised the ideas of the participants but also advised them that they would need to work hard on the ideas themselves and on the skills of the authors in order to see their idea put to practice.
&lt;/p&gt;

&lt;p&gt;
Overall it was a great experience and I'm gratefull for the opportunity to participate. And now with the school long gone, I'm reviewing/archiving the to-do-list of activities for the summer school and building the list of…
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Lessons learned&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;dl class="org-dl"&gt;
&lt;dt&gt; Infrastructure &lt;i&gt;is&lt;/i&gt; a problem &lt;/dt&gt;&lt;dd&gt;We learned the hard way that not everyone has high-end laptops that can run resource-heavy applications.
&lt;/dd&gt;
&lt;dt&gt; Murphy's law is still applicable &lt;/dt&gt;&lt;dd&gt;"Anything that can go wrong, will go wrong", Murphy's las states. And indeed, we had a participant that couldn't build the docker image for some reason but when we tried to load an already built image into docker via a USB stick, the USB port failed.
&lt;/dd&gt;
&lt;dt&gt; Think and tailor your workshop for the audience &lt;/dt&gt;&lt;dd&gt;Being heavily involvment into software development, Tiberiu and I made some wrong assumptions — &lt;i&gt;people will know how to install Docker on their machines&lt;/i&gt;, &lt;i&gt;the participants will know how to execute the command lines we provided&lt;/i&gt; etc. The vast majority of the participants were linguists at core and such tasks that are perceived as trivial by us are surely not trivial for them.
&lt;/dd&gt;
&lt;dt&gt; You learn a lot while teaching &lt;/dt&gt;&lt;dd&gt;This is something that cannot be overstated. I knew I will be learning a lot of new stuff from the collaboration with Tiberiu (I did not knew &lt;code&gt;NLP-Cube&lt;/code&gt; existed befor this summer school) but to my great suprise I also learned a great deal of stuff just by being present and helping people.
&lt;/dd&gt;
&lt;dt&gt; Allow yourself to fail &lt;/dt&gt;&lt;dd&gt;The dissapointing results of our endeavor to train a Machine Learning model had an impact on my morale but while discussing with the more experienced members of the committee
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://rebeja.eu/posts/eurolan-2019/</guid><pubDate>Fri, 24 May 2019 11:49:19 GMT</pubDate></item><item><title>2018 year in review</title><link>https://rebeja.eu/posts/2018-year-in-review/</link><dc:creator>Petru Rebeja</dc:creator><description>&lt;p&gt;
Looking back at 2018 I can say for sure that it has been a busy and thankfully fruitfull year for me; I have managed to juggle work and community tasks while also spending time with my family.
&lt;/p&gt;

&lt;p&gt;
So, without further ado here are my biggest accomplishments in 2018:
&lt;/p&gt;
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Presentation on Big Data Analytics&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Being known as a &lt;i&gt;Big Data enthusiast&lt;/i&gt; at my job, I was asked if I could give a presentation on &lt;i&gt;Big Data&lt;/i&gt;. I was more than happy to do so and this way I got a glimpse at how it feels when giving a lecture - &lt;a href="https://www.facebook.com/CentricITSolutionsRomania/posts/2868690433237180"&gt;the presentation was scheduled&lt;/a&gt; in one of the big lecture rooms at the &lt;a href="http://www.feaa.uaic.ro"&gt;Faculty Of Economics and Business Administration&lt;/a&gt;; can't say I didn't liked the feeling. The &lt;a href="https://1drv.ms/p/s!AhX9uvfmpbmJnd4LKQn-eGppDHGdeg"&gt;slides&lt;/a&gt; are available from my OneDrive account.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Artificial Neural Networks tutorial&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
A few weeks later I was &lt;a href="https://www.facebook.com/infobalti/photos/a.1888888887828977/1888889244495608/"&gt;hosting a tutorial on Artificial Neural Networks&lt;/a&gt; at &lt;a href="http://usarb.md"&gt;Alecu Russo State University&lt;/a&gt; from Bălți, Moldova. The tutorial was the first event at the &lt;a href="http://www.miti2018.usarb.md/"&gt;International Conference on Mathematics, Informatics and Information Technologies&lt;/a&gt; and also &lt;b&gt;my first academic talk&lt;/b&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;PIN Magazine article about Artificial Intelligence&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
In june we celebrated one year since the &lt;a href="https://iasi.ai/"&gt;Iași AI&lt;/a&gt; community was created with a cover story in &lt;a href="https://www.pinmagazine.ro/"&gt;PIN Magazine&lt;/a&gt; about Artificial Intelligence. I authored one of the cover story articles in which I expressed my opinion about how Artificial Intelligence, although it had tremendous success lately, it's still at the beginning of its evolution and we, humans, must set our expectations accordingly but still expect that AI will change our lives. You can read the whole article &lt;a href="https://issuu.com/danzaharia/docs/pinmagazine_9_cu_coperti/25"&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;Iași AI TensorFlow workshops&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
At the end of August and in the beginning of October I co-hosted two &lt;a href="https://iasi.ai/workshops/tensorflow-workshop-iasi-ai/"&gt;TensorFlow worksops&lt;/a&gt; together with &lt;a href="https://www.linkedin.com/in/ciprian-talmacel-6b08ba4a/"&gt;Ciprian Tălmăcel&lt;/a&gt; organized by the &lt;a href="https://iasi.ai/"&gt;Iași AI&lt;/a&gt; community. This was my debut as a presenter within the community and proved to be a great experience and success. I had the opportunity to learn a lot from Ciprian and also to improve my skills through the feedback given by attendees. You can find the Jupyter Notebooks for the workshop in the &lt;a href="https://github.com/IASIAI/tensorflow-workshop"&gt;dedicated Github repository&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;RNN presentation @ Iași AI&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
A month later, in November, was my second appearance within the Iași AI community, this time with a presentation about &lt;a href="https://iasi.ai/meetups/unrolling-recurrent-neural-networks/"&gt;Recurrent Neural Networks&lt;/a&gt;. The main focus of a presentation was how simple the code can be if you possess the theoretical background and how you can actually learn (to some extent) the theory behind just looking at the implementation. I have published the slides, the code and the LaTeX code for the presentation in a &lt;a href="https://github.com/RePierre/manelator"&gt;dedicated Github repository&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-6" class="outline-2"&gt;
&lt;h2 id="sec-6"&gt;Other activity @ Iași AI&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;p&gt;
Gladly, my activity within Iași AI community did not end with the RNN presentation; later on, I helped organize the &lt;a href="https://iasi.ai/meetups/panel-ai-opportunities/"&gt;AI opportunities panel&lt;/a&gt; which was the last official event of the community for 2018. In parallel we started puring more effort into implementing an Open Data Hub initiative for Iași; this however is a project for the upcomming year(s).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-7" class="outline-2"&gt;
&lt;h2 id="sec-7"&gt;Promoted to Technical Lead&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-7"&gt;
&lt;p&gt;
Last but not least, I got promoted at work. In April I switched projects at work and took the switch as an opportunity to affirm myself. The efforts I've put into building solid and scalable products and also improving the existing ones have been observed by the management team and at the end of the year I got promoted to the role of Technical Lead.
&lt;/p&gt;

&lt;p&gt;
It's already the start of 2019 and I'm excited to what's comming ahead - the Open Data Hub, the newly opened opportunities at work, the upcomming projects in academia and many more I don't know of. What I do know is that &lt;b&gt;I will do my best to do even better in 2019&lt;/b&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://rebeja.eu/posts/2018-year-in-review/</guid><pubDate>Tue, 01 Jan 2019 13:06:26 GMT</pubDate></item><item><title>English Romanian dictionary for Machine Learning</title><link>https://rebeja.eu/posts/english-romanian-dictionary-for-machine-learning/</link><dc:creator>Petru Rebeja</dc:creator><description>&lt;p&gt;
This post is an initiative to build a list of Romanian translations for Machine Learning terms.
&lt;/p&gt;
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;A&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;hr&gt;
&lt;p&gt;
&lt;i&gt;Artificial Intelligence&lt;/i&gt; = Inteligență Artificială
&lt;/p&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;B&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;hr&gt;
&lt;p&gt;
&lt;i&gt;Biased&lt;/i&gt; = tendențios, subiectiv.
&lt;/p&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;E&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;hr&gt;
&lt;p&gt;
&lt;i&gt;Eigenvalues (vectors)&lt;/i&gt; = valori (vectori) proprii.
&lt;/p&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;F&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;hr&gt;
&lt;p&gt;
&lt;i&gt;Features&lt;/i&gt; = atribute +, particularități, caracteristici, trăsături+.
&lt;/p&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;G&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;hr&gt;
&lt;p&gt;
&lt;i&gt;Gold corpus&lt;/i&gt; = corpus de referință
&lt;/p&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-6" class="outline-2"&gt;
&lt;h2 id="sec-6"&gt;M&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;hr&gt;
&lt;p&gt;
&lt;i&gt;Machine Learning&lt;/i&gt; = Învățare Automată
&lt;/p&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-7" class="outline-2"&gt;
&lt;h2 id="sec-7"&gt;O&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-7"&gt;
&lt;hr&gt;
&lt;p&gt;
&lt;i&gt;Outliers&lt;/i&gt; = valori extreme.
&lt;/p&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-8" class="outline-2"&gt;
&lt;h2 id="sec-8"&gt;S&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-8"&gt;
&lt;hr&gt;
&lt;p&gt;
&lt;i&gt;Skewed&lt;/i&gt; = nesimetric.
&lt;/p&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-9" class="outline-2"&gt;
&lt;h2 id="sec-9"&gt;T&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-9"&gt;
&lt;hr&gt;
&lt;p&gt;
&lt;i&gt;Threshold&lt;/i&gt; = prag.
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;Toy problem&lt;/i&gt; = problemă didactică.
&lt;/p&gt;

&lt;hr&gt;
&lt;p&gt;
&lt;b&gt;Acknowledgements&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
Big thanks to &lt;a href="https://www.facebook.com/gabihaja"&gt;Gabriela Haja&lt;/a&gt; and &lt;a href="https://profs.info.uaic.ro/~mmoruz/"&gt;Alex Moruz&lt;/a&gt; for reviewing this list.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>dictionary</category><category>Machine Learning</category><category>Romanian</category><category>terms</category><guid>https://rebeja.eu/posts/english-romanian-dictionary-for-machine-learning/</guid><pubDate>Thu, 15 Nov 2018 22:00:00 GMT</pubDate></item><item><title>Automating custom workflow in Emacs</title><link>https://rebeja.eu/posts/automating-custom-workflow-in-emacs/</link><dc:creator>Petru Rebeja</dc:creator><description>&lt;p&gt;
Due to the lack of human resources in a research project I'm involved the team decided to take upon itself the semantic comparison of 3000 pairs of papers from the medical domain.
&lt;/p&gt;

&lt;p&gt;
Each paper is a &lt;code&gt;json&lt;/code&gt; file with structured contents of the publication like in the picture below:
&lt;img src="https://rebeja.eu/images/publication-json.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Since we also want to do &lt;span class="underline"&gt;at least some&lt;/span&gt; cross-validation we decided that each member of the team should compare 2000 pairs of publications so that each pair will be compared by two out of three persons from the team.
So we split the 3000 publication pairs into 3 sets which were saved into &lt;code&gt;csv&lt;/code&gt; files with the following structure: &lt;code&gt;file1, file2, similarity_score&lt;/code&gt;; where &lt;code&gt;file1&lt;/code&gt; and &lt;code&gt;file2&lt;/code&gt; are the names of the files and &lt;code&gt;similarity_score&lt;/code&gt; is to be filled with the semantic similarity score.
&lt;/p&gt;

&lt;p&gt;
My first idea was to have Emacs split into three windows to allow for both registering the score and a side-by-side comparison of files:
&lt;img src="https://rebeja.eu/images/comparison-layout.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
For each pair of files from the left window I would:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;Copy the name of the first file using &lt;code&gt;C-a C-SPC C-u 2 M-f M-w&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Go the the top window on the right using &lt;code&gt;C-x o 2&lt;/code&gt; (I'm using &lt;code&gt;ace-window&lt;/code&gt; thus after pressing &lt;code&gt;C-x o&lt;/code&gt; I can select the window to switch to by pressing it's number key)
&lt;/li&gt;
&lt;li&gt;Open the file using &lt;code&gt;C-x C-f&lt;/code&gt; then navigating to the directory and yanking the file name at the end
&lt;/li&gt;
&lt;li&gt;Move back to the first window using &lt;code&gt;C-x o 1&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Copy the name of the second file by first moving over the first comma with &lt;code&gt;C-f&lt;/code&gt; then &lt;code&gt;C-u 2 M-f M-w&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Go to the bottom window on the right using &lt;code&gt;C-x o 3&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Repeat step 3
&lt;/li&gt;
&lt;li&gt;Repeat step 4
&lt;/li&gt;
&lt;li&gt;Compare publications and register score in &lt;code&gt;similarity_score&lt;/code&gt; column
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Although this workflow seems quite laborious due to so many steps I've gotten used quite rapidly (from the second pair) to it and managed to form some sort of temporary muscle memory for opening files in the sense that I was doing that on full auto-pilot, &lt;i&gt;without thinking that I'm opening files&lt;/i&gt;.
&lt;/p&gt;

&lt;p&gt;
However, there was a problem with this workflow: the directory in which the files to be compared are located contains around 100 K such &lt;code&gt;json&lt;/code&gt; files and on my 5400 RPM hard-disk it took what seemed like forever to scan the directory when pressing &lt;code&gt;C-x C-f&lt;/code&gt; in order to give me the benefit of autocompletion which I did not need because I &lt;i&gt;already knew the files names&lt;/i&gt;. So basically for each pair of publications I was stuck waiting twice for the directory to be scanned.
&lt;/p&gt;

&lt;p&gt;
And then I got an idea: &lt;b&gt;I already knew the file names; the directory containing them is the same so wouldn't it be faster to send the full path (obtained by concatenating file name and directory path) to &lt;code&gt;find-file&lt;/code&gt; function instead of waiting for a directory scan?&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
I switched to the &lt;code&gt;*scratch*&lt;/code&gt; buffer and evaluated a &lt;code&gt;find-file&lt;/code&gt; call with the full path of a file and of course, the file was loaded instantly.
&lt;/p&gt;

&lt;p&gt;
So I decided to take it a bit further: &lt;b&gt;Can't I, while on a line in left window open the files on that line in the other two windows?&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
Of course I can because &lt;b&gt;Emacs is awesome&lt;/b&gt;. All I need to do is write some code lisp code that will do what I want.
&lt;/p&gt;

&lt;p&gt;
Fisrt things first, I declared a (global) variable to hold the full path to the directory containing the files:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defvar&lt;/span&gt; &lt;span class="nv"&gt;*compare-publications-dir*&lt;/span&gt;
  &lt;span class="s"&gt;"&amp;lt;directory-path&amp;gt;"&lt;/span&gt;
  &lt;span class="s"&gt;"The location of files to compare."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
Then I created a function to get the whole line from the &lt;code&gt;csv&lt;/code&gt; file:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;get-current-line&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;progn&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;beginning-of-visual-line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;end-of-visual-line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;buffer-substring-no-properties&lt;/span&gt; &lt;span class="nv"&gt;start&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
This function moves the point to the beginning of the line by calling &lt;code&gt;(beginning-of-visual-line)&lt;/code&gt; then saves the position in a local variable &lt;code&gt;start&lt;/code&gt; and moves to the end of the line via a call to &lt;code&gt;(end-of-visual-line)&lt;/code&gt;. In the end it returns the substring which is between &lt;code&gt;start&lt;/code&gt; position and the position returned by &lt;code&gt;(point)&lt;/code&gt; function.
&lt;/p&gt;

&lt;p&gt;
Having the line of text I need to:
a) Split the line by ~,~
b) Store first and second parts of the line into two variables called &lt;code&gt;file-1&lt;/code&gt; and &lt;code&gt;file-2&lt;/code&gt;
c) Move to the top-right window
d) Concatenate the values of &lt;code&gt;*compare-publications-dir*&lt;/code&gt; and &lt;code&gt;file-1&lt;/code&gt; and pass the result to &lt;code&gt;(find-file-readonly)&lt;/code&gt; (I don't want to accidentally change the files being compared)
e) Move to the bottom-right window
f) Repeat d) with &lt;code&gt;file-2&lt;/code&gt; instead of &lt;code&gt;file-1&lt;/code&gt;
g) Return to the left window
&lt;/p&gt;

&lt;p&gt;
This was also implemented with a function which can be called interactively via &lt;code&gt;M-x&lt;/code&gt;:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;compare-publications&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let* &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;files&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;csv-split-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-current-line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;","&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file-1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;car &lt;/span&gt;&lt;span class="nv"&gt;files&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file-2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;car &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cdr &lt;/span&gt;&lt;span class="nv"&gt;files&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;other-window&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;find-file-read-only&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="nv"&gt;*compare-publications-dir*&lt;/span&gt; &lt;span class="nv"&gt;file-1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;other-window&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;find-file-read-only&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="nv"&gt;*compare-publications-dir*&lt;/span&gt; &lt;span class="nv"&gt;file-2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;other-window&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And that's it. After calling &lt;code&gt;eval&lt;/code&gt; on the functions above I have an automated workflow. Now, to compare two files, I just navigate to a line in the &lt;code&gt;csv&lt;/code&gt; file and from there type &lt;code&gt;M-x compare-publications&lt;/code&gt;. The only thing left to do manually (beside the comparison itself) is to press the key for the &lt;code&gt;similarity_score&lt;/code&gt; of files from that line.
&lt;/p&gt;</description><category>automation</category><category>awesome</category><category>custom workflow</category><category>Emacs</category><guid>https://rebeja.eu/posts/automating-custom-workflow-in-emacs/</guid><pubDate>Sat, 02 Jun 2018 22:00:00 GMT</pubDate></item><item><title>ServiceActivationException when auto-starting WCF services with AutofacServiceHostFactory</title><link>https://rebeja.eu/posts/serviceactivationexception-autofacservicehostfactory/</link><dc:creator>Petru Rebeja</dc:creator><description>&lt;p&gt;
I switched teams at work and as a welcome gift into the new team I got to investigate the following error:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
  Exception: System.ServiceModel.ServiceActivationException: The service '/AuthorisationService.svc' cannot be activated due to an exception during compilation.  The exception message is: The AutofacServiceHost.Container static property must be set before services can be instantiated.. —&amp;gt; System.InvalidOperationException: The AutofacServiceHost.Container static property must be set before services can be instantiated.
   at Autofac.Integration.Wcf.AutofacHostFactory.CreateServiceHost(String constructorString, Uri[] baseAddresses)
   at System.ServiceModel.ServiceHostingEnvironment.HostingManager.CreateService(String normalizedVirtualPath, EventTraceActivity eventTraceActivity)
   at System.ServiceModel.ServiceHostingEnvironment.HostingManager.ActivateService(ServiceActivationInfo serviceActivationInfo, EventTraceActivity eventTraceActivity)
   at System.ServiceModel.ServiceHostingEnvironment.HostingManager.EnsureServiceAvailable(String normalizedVirtualPath, EventTraceActivity eventTraceActivity)
   — End of inner exception stack trace —
   at System.ServiceModel.ServiceHostingEnvironment.HostingManager.EnsureServiceAvailable(String normalizedVirtualPath, EventTraceActivity eventTraceActivity)
   at System.ServiceModel.ServiceHostingEnvironment.EnsureServiceAvailableFast(String relativeVirtualPath, EventTraceActivity eventTraceActivity)
Process Name: w3wp
Process ID: 9776
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
The troublesome service is hosted in an &lt;code&gt;ASP.NET&lt;/code&gt; web application and it's preloaded with a custom implementation of &lt;a href="https://msdn.microsoft.com/en-us/library/system.web.hosting.iprocesshostpreloadclient(v=vs.110).aspx"&gt;&lt;code&gt;IProcessHostPreloadClient&lt;/code&gt;&lt;/a&gt; which more or less does what's described in &lt;a href="http://lazynreclined.blogspot.nl/2014/09/enable-autostart-in-iis-75-without.html"&gt;this blog post&lt;/a&gt;.
Since the project hosting the service is using AutoFac as it's DI framework/library the service is setup to use &lt;code&gt;AutofacServiceHostFactory&lt;/code&gt; as the service factory:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;%@ ServiceHost
  Service="AuthorizationServiceImpl, AuthorizationService"
  Factory="Autofac.Integration.Wcf.AutofacServiceHostFactory, Autofac.Integration.Wcf" %&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
After some googling for the error I turned out to the &lt;a href="http://docs.autofac.org/en/latest/integration/wcf.html#was-hosting-and-non-http-activation"&gt;AutoFac documentation page&lt;/a&gt; where I got the first idea of what is happening:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
When hosting WCF Services in WAS (Windows Activation Service), you are not given an opportunity to build your container in the Application&lt;sub&gt;Start&lt;/sub&gt; event defined in your Global.asax because WAS doesn’t use the standard ASP.NET pipeline.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
Ok, great! Now I know that &lt;code&gt;ServiceHostingEnvironment.EnsureServiceAvailable()&lt;/code&gt; method (which is called to activate the service) doesn't use the HTTP pipeline from ASP.NET. A solution to this issue is in the next paragraph of the documentation:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
The alternative approach is to place a code file in your &lt;code&gt;App_Code&lt;/code&gt; folder that contains a type with a &lt;code&gt;public static void AppInitialize()&lt;/code&gt; method.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
And that's what I did. I went to to the project in Visual Studio, added a &lt;code&gt;special ASP.NET folder&lt;/code&gt; named &lt;code&gt;App_Code&lt;/code&gt; and added a class named &lt;code&gt;AppStart&lt;/code&gt; to it with a single method &lt;code&gt;public static void AppInitialize()&lt;/code&gt; which contained all the required bootstrapping logic for AutoFac. I redeployed the application on but the error kept popping and it's after &lt;b&gt;carefully&lt;/b&gt; reading the comments from &lt;a href="https://stackoverflow.com/a/330720/844006"&gt;this StackOverflow answer&lt;/a&gt; and &lt;a href="https://blogs.msdn.microsoft.com/wenlong/2006/01/11/how-to-initialize-hosted-wcf-services/"&gt;this blog post on how to initialize WCF services&lt;/a&gt; I found why the &lt;code&gt;AppInitialize&lt;/code&gt; method wasn't invoked: &lt;b&gt;it was because the &lt;code&gt;AppStart.cs&lt;/code&gt; needs it's build action to be &lt;code&gt;Content&lt;/code&gt; not Compile&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
So when getting the &lt;code&gt;ServiceActivationexception&lt;/code&gt; with the error message &lt;code&gt;The AutofacServiceHost.Container static property must be set before services can be instantiated&lt;/code&gt; make sure to have the following:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;The special ASP.NET folder &lt;code&gt;App_Code&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;A class in &lt;code&gt;App_Code&lt;/code&gt; having a method with this signature &lt;code&gt;public static void AppInitialize()&lt;/code&gt; which contains all the required initialization code
&lt;/li&gt;
&lt;li&gt;The build action of the file containing the above method is set to &lt;code&gt;Content&lt;/code&gt; as shown in the picture below
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
&lt;img src="https://rebeja.eu/images/appinitialize.png" alt="nil"&gt;
&lt;/p&gt;</description><category>AutoFacServiceHostFactory</category><category>Service Activation</category><category>WCF</category><guid>https://rebeja.eu/posts/serviceactivationexception-autofacservicehostfactory/</guid><pubDate>Wed, 16 May 2018 22:00:00 GMT</pubDate></item><item><title>MediatR - Handler not found error when the DataContext couldn't be initialized</title><link>https://rebeja.eu/posts/mediatr-handler-not-found-error-when-the-datacontext-couldnt-be-initialized/</link><dc:creator>Petru Rebeja</dc:creator><description>&lt;p&gt;
&lt;b&gt;TL;DR&lt;/b&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
If you use MediatR package and it suddenly it fails with &lt;code&gt;Handler was not found for request of type &amp;lt;type&amp;gt;&lt;/code&gt; inspect the dependencies of the handler it fails to create/invoke. One or more of those dependencies (a &lt;code&gt;DbContext&lt;/code&gt; in my case) throws an error when instantiated and the error is making MediatR fail.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;a href="https://jimmybogard.com/"&gt;Jimmy Bogard&lt;/a&gt;s' &lt;a href="https://github.com/jbogard/MediatR"&gt;MediatR&lt;/a&gt; is a little gem of a package I like using because it enables a good separation of business logic from the boilerplate code and provides a clean and structured enforcement of the &lt;a href="https://en.wikipedia.org/wiki/Single_responsibility_principle"&gt;Single Responsibility Principle&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I use this package extensively in &lt;a href="https://rise-tv.net"&gt;one of my outside work projects&lt;/a&gt; (I'm proud to say that it's not a pet project anymore) to delegate requests/commands to their respective request/command handlers. The project itself consists of two parts - an ASP.NET MVC application for public access and back office management and a WebAPI application used for registering payments. In order to keep both Web Application and Web API URLs consistent (and pretty) I have hosted the Web API application as a virtual directory inside the main Web Application.
&lt;/p&gt;

&lt;p&gt;
Recently, after an update of the application the payment module went down (giving me a tiny heart attack). As expected I dove into the application logs and after some thorough search I found the culprit with the following error message:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
An unhandled exception of type 'System.InvalidOperationException' occurred in MediatR.dll Additional information: Handler was not found for request of type GetAuthorizedUserRequest. Container or service locator not configured properly or handlers not registered with your container.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The exception was popping inside the &lt;a href="https://msdn.microsoft.com/en-us/library/system.web.http.authorizeattribute.isauthorized(v=vs.118).aspx"&gt;&lt;code&gt;IsAuthorized&lt;/code&gt;&lt;/a&gt; method of a custom &lt;a href="https://msdn.microsoft.com/en-us/library/system.web.http.authorizeattribute(v=vs.118).aspx"&gt;&lt;code&gt;AuthorizeAttribute&lt;/code&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;protected override bool IsAuthorized(HttpActionContext actionContext)
{
    try
    {
	  var authorizationToken = new AuthorizationToken(actionContext.Request);
	  if (String.IsNullOrEmpty(authorizationToken.Value))
	  {
		return false;
	  }
	  var request = new GetAuthorizedUserRequest
	  {
		AuthorizationToken = authorizationToken.Value
	  };
	  var user = _securityService.GetAuthorizedUser(request);
	  return user != null;
    }
    catch (Exception)
    {
	  return false;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
The first thing to do was to thoroughly inspect what does the IoC container (&lt;code&gt;StructureMap&lt;/code&gt; in my case) has registered. After a glimpse through the output of &lt;code&gt;WhatDoIHave()&lt;/code&gt; method I saw that the handler &lt;code&gt;GetAuthorizedUserRequestHandler&lt;/code&gt; was indeed registered as a &lt;code&gt;IRequestHandler&amp;lt;GetAuthorizedUserRequest, GetAuthorizedUserResponse&amp;gt;&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
So, what is the problem then? The &lt;code&gt;InnerException&lt;/code&gt; property of the exception that was caught was &lt;code&gt;null&lt;/code&gt; and I was stuck.
&lt;/p&gt;

&lt;p&gt;
On the dawn of divine inspiration I decided to comment out the existing constructor of the request handler and create a default one (also return a dummy user). It worked - the exception wasn't thrown and the user got authenticated.
&lt;/p&gt;

&lt;p&gt;
However, the next request (dispatched through MediatR) that had to query something in the database failed which gave me the idea that there must be some issues with the &lt;code&gt;DbContext&lt;/code&gt; initialization (I use Entity Framework).
Sure enough - when I put a breakpoint in the constructor of my &lt;code&gt;DataContext&lt;/code&gt; class (derived from &lt;code&gt;DbContext&lt;/code&gt;) I got an exception mentioning that the key "mssqllocaldb" is missing from &lt;code&gt;&amp;lt;connectionStrings&amp;gt;&lt;/code&gt; section.
&lt;/p&gt;

&lt;p&gt;
Then, I remembered that the latest code update also came with an update of Entity Framework NuGet package and it dawned upon me why the MediatR was failing. As I said in the beginning, the Web API application is hosted under the main Web Application. This means that the &lt;code&gt;&amp;lt;entityFramework&amp;gt;&lt;/code&gt; configuration element in the child application is inherited from the parent one so the &lt;code&gt;Web.config&lt;/code&gt; file of the child application did not contain any section related to Entity Framework.
When I did the upgrade of the NuGet package the installer added the configuration section with default values. Those default and wrong values were read by the &lt;code&gt;DbContext&lt;/code&gt; class constructor and since the values were wrong the constructor failed. After deleting the &lt;code&gt;&amp;lt;entityFramework&amp;gt;&lt;/code&gt; configuration element the application went back online.
&lt;/p&gt;</description><category>error</category><category>handler not found</category><category>MediatR</category><guid>https://rebeja.eu/posts/mediatr-handler-not-found-error-when-the-datacontext-couldnt-be-initialized/</guid><pubDate>Thu, 01 Feb 2018 22:00:00 GMT</pubDate></item><item><title>The common pitfalls of ORM frameworks - RBAR</title><link>https://rebeja.eu/posts/the-common-pitfalls-of-orm-frameworks-rbar/</link><dc:creator>Petru Rebeja</dc:creator><description>&lt;p&gt;
ORM frameworks are a great tool especially for junior developers because they allow bluring the line between the application logic and the data it crunches. Except that the aforementioned line blurring advantage may become a real production issue if not taken in consideration when writing the code.
&lt;/p&gt;

&lt;p&gt;
Let us consider an example. Let's suppose we're working on a (what else?) e-commerce platform. Somewhere in the depts of that platform there is a &lt;code&gt;IOrderService&lt;/code&gt; which exposes the following method:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public interface IOrderService
{
    void PlaceOrder(Guid customerId, IEnumerable&amp;lt;OrderItem&amp;gt; itemIds)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
where &lt;code&gt;OrderItem&lt;/code&gt; holds the data about an ordered item.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class OrderItem
{
    public Guid ItemId { get; set; }

    public int Quantity { get; set; }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
The &lt;code&gt;PlaceOrder&lt;/code&gt; method needs to:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Lookup the &lt;code&gt;Customer&lt;/code&gt; in the database
&lt;/li&gt;
&lt;li&gt;Create a new &lt;code&gt;CustomerOrder&lt;/code&gt; instance
&lt;/li&gt;
&lt;li&gt;Add each &lt;code&gt;Item&lt;/code&gt; to the order and decrease stock count
&lt;/li&gt;
&lt;li&gt;Save the &lt;code&gt;CustomerOrder&lt;/code&gt; in the database
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Of course, since we're using an ORM framework, the classes used by the repositories - &lt;code&gt;Customer&lt;/code&gt;, &lt;code&gt;CustomerOrder&lt;/code&gt; and &lt;code&gt;Item&lt;/code&gt; - are mapped to database tables.
&lt;/p&gt;

&lt;p&gt;
Given the above, someone would be tempted to implement the &lt;code&gt;PlaceOrder&lt;/code&gt; method like this:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public void PlaceOrder(Guid customerId, IEnumerable&amp;lt;OrderItem&amp;gt; orderItems)
{
    var customer = _customerRepository.Get(customerId);
    var order = new CustomerOrder(customer);

    foreach(var orderedItem in orderItems)
    {
	var item = _itemRepository.Get(orderedItem.ItemId);
	item.DecreaseStockCount(orderedItem.Quantity);
	order.Add(item);
    }

    _customerOrderRepository.Register(order);
    _unitOfWork.Commit();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
And why wouldn't they? It seems the most straightforward transposition of the requirements defined above. The code behaves as expected in both Dev and QA environments and afterwards it's promoted to production where lies a database with hundreds of thousands of rows in the &lt;code&gt;Items&lt;/code&gt; table. There also, the behavior is as expected until one day an eager customer wants to buy 980 distinct items (because why not?).
&lt;/p&gt;

&lt;p&gt;
What happens with the code above? It &lt;i&gt;still&lt;/i&gt; works well but the database command times out and the customer cannot place a &lt;b&gt;significant&lt;/b&gt; order.
&lt;/p&gt;

&lt;p&gt;
So what is the problem? Why it times out? Well, because the aforementioned line between application logic and database is blurred enough for the iterative paradigm to creep into the set-based one. In the SQL community this paradigm creep has a name - &lt;a href="https://www.red-gate.com/simple-talk/sql/t-sql-programming/rbar--row-by-agonizing-row/"&gt;Row By Agonizing Row&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
To put it in the context of the example above - &lt;b&gt;it takes more time to do 980 pairs of &lt;code&gt;SELECT&lt;/code&gt; and &lt;code&gt;UPDATE&lt;/code&gt; operations than to do one &lt;code&gt;SELECT&lt;/code&gt; which returns 980 rows followed by one &lt;code&gt;UPDATE&lt;/code&gt; which alters 980 rows&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
So, let's switch the paradigm and start working with collections in our code to minimize the number of operations in the database. The first thing to do is to load all items in bulk instead of loading them one by one. This will reduce the number of &lt;code&gt;SELECT&lt;/code&gt; operations &lt;b&gt;from 980 to 1&lt;/b&gt; (a whooping 50% of the number of operations). We still need to update the stock counts for each item individually because the ORM framework doesn't know how to translate the changes for each item into a single &lt;code&gt;UPDATE&lt;/code&gt; statement but considering that we've halved the total number of operations let's give this approach a try shall we?
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public void PlaceOrder(Guid customerId, IEnumerable&amp;lt;OrderItem&amp;gt; orderItems)
{
    var customer = _customerRepository.Get(customerId);
    var customerOrder = new CustomerOrder();

    var items = itemRepository.Items
	.Join(orderItems,
	      item =&amp;gt; item.Id,
	      orderedItem =&amp;gt; orderedItem.ItemId,
	      (item, _) =&amp;gt; item)
	.ToDictionary(i =&amp;gt; i.Id);

    foreach(var orderedItem in orderedItems)
    {
	var item  = items[orderedItem.ItemId];
	item.DecreaseStockCount(orderedItem.Quantity);
	customerOrder.Add(item);
    }

    _customerOrderRepository.Register(order);
    _unitOfWork.Commit();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
This will solve the problem with the timeout but will create another one - useless load on the system. The code loads 980 rows from the database but only uses two attributes of each row - &lt;code&gt;Id&lt;/code&gt; and &lt;code&gt;Barcode&lt;/code&gt;. We might say that this can be solved by projecting an &lt;code&gt;Item&lt;/code&gt; into a tuple of &lt;code&gt;&amp;lt;Barcode, Id&amp;gt;&lt;/code&gt; but this would be a partial solution because we can still place a great burden on system memory by sending an request of 10k items.
Also, there are still 980 &lt;code&gt;UPDATE&lt;/code&gt; statements that need to be executed which is still &lt;b&gt;a lot&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
The best approach to this is to not load any data at all from the database and to do the processing as close to the actual data as possible.
And how can we do that? Exactly - with &lt;code&gt;stored procedures&lt;/code&gt;.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;declare&lt;/span&gt; &lt;span class="k"&gt;procedure&lt;/span&gt; &lt;span class="n"&gt;CreateCustomerOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
	&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;customerId&lt;/span&gt; &lt;span class="n"&gt;uniqueidentifier&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
	&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;orderItems&lt;/span&gt; &lt;span class="n"&gt;udttorderitems&lt;/span&gt; &lt;span class="n"&gt;readonly&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;no_count&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;

    &lt;span class="k"&gt;update&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Count&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Quantity&lt;/span&gt;
    &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;StockCounts&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;
    &lt;span class="k"&gt;join&lt;/span&gt; &lt;span class="n"&gt;Items&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ItemId&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;
    &lt;span class="k"&gt;join&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;orderItems&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ItemId&lt;/span&gt;

    &lt;span class="k"&gt;insert&lt;/span&gt; &lt;span class="k"&gt;into&lt;/span&gt; &lt;span class="n"&gt;CustomerOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CustomerId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OrderDateTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;values&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;customerId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GetDate&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;insert&lt;/span&gt; &lt;span class="k"&gt;into&lt;/span&gt; &lt;span class="n"&gt;OrderLines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OrderId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ItemId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quantity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;scope_identity&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Quantity&lt;/span&gt;
    &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Items&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="k"&gt;join&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;orderItems&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ItemId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
Now, of course in real life situations there won't be a customer that orders almost 1000 items with a single order and the second approach (bulk load items and iterate the collection) will do just fine.
The important thing to keep in mind in such cases is the need to switch from a procedural mindset to a set-based one thus pruning this phenomenon of paradigm creep which can become a full-blown RBAR processing.
&lt;/p&gt;</description><category>ORM</category><category>pitfalls</category><category>RBAR</category><guid>https://rebeja.eu/posts/the-common-pitfalls-of-orm-frameworks-rbar/</guid><pubDate>Wed, 17 Jan 2018 22:00:00 GMT</pubDate></item><item><title>Python development using Emacs from terminal</title><link>https://rebeja.eu/posts/python-development-using-emacs-from-terminal/</link><dc:creator>Petru Rebeja</dc:creator><description>&lt;p&gt;
A few weeks ago, while working on a hackathon project I found myself very disappointed with my progress.
&lt;/p&gt;

&lt;p&gt;
I had the impression that I can do better but something is holding me back and then I realized that I was too distracted by &lt;code&gt;Alt-Tab&lt;/code&gt;-ing through all open applications, iterating through dozens of open tabs in the browser and spending too much time on websites that were of no use at that time.
&lt;/p&gt;

&lt;p&gt;
At that moment, on a whim I decided to try and eliminate all of these distractions the hard way - &lt;b&gt;by not using the X server at all&lt;/b&gt; (I was working on &lt;a href="https://kubuntu.org/"&gt;Kubuntu&lt;/a&gt;).
&lt;/p&gt;

&lt;p&gt;
Since I was mainly working with Python code and occasionally I would need to open some file for inspection and all of these were done from Emacs I said to myself:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Emacs can be opened from console so why not start working on hackathon from console?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Said and done. &lt;code&gt;Ctrl-Alt-F1&lt;/code&gt; and I was prompted with the TTY cursor. I logged in, started Emacs opened all the required files and started working. All good until I found myself in the situation where I needed to lookup something on the Internet. I knew I could use &lt;code&gt;eww&lt;/code&gt; as a web browser so normally I did so (yeah, I'm one of those people that use Bing instead of Google):
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;M-x eww
Enter URL or keywords: www.bing.com
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
And nothing… Oh, wait, I remember needing to enter some username and password when connecting to the Wi-Fi but I wasn't prompted for those after logging into terminal. How do I connect to the network?
&lt;/p&gt;

&lt;p&gt;
As there was no way for me to find that out without using some sort of GUI (I'm not that good with terminals) I started a new X session, connected from there to Wi-Fi and found this &lt;a href="https://askubuntu.com/a/461831/561980"&gt;StackOverflow answer&lt;/a&gt;. So I logged back to the terminal and from Emacs started &lt;b&gt;eshell&lt;/b&gt; with &lt;code&gt;M-x eshell&lt;/code&gt;. From there I issued the following command
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nmcli c up &amp;lt;wi-fi-name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
which connected me to the Wi-Fi network.
&lt;/p&gt;

&lt;p&gt;
Note: I got connected because on previous sessions I opted to store the credentials for the connection; to get a prompt for username and password for the Wi-Fi use the &lt;code&gt;--ask&lt;/code&gt; parameter like this:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nmcli --ask c up &amp;lt;wi-fi-name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
After connecting I resumed my coding and only at the end of the hackathon I stopped to ponder upon my experience; it wasn't as smooth as I expected. Although I consider a big plus the fact that I was able to issue shell commands within Emacs through &lt;b&gt;eshell&lt;/b&gt; there were some hick-ups along the way.
&lt;/p&gt;

&lt;p&gt;
The first thing I noticed is that under terminal not all shortcuts that are very familiar for me are available. Namely, in &lt;b&gt;org-mode&lt;/b&gt; the combination &lt;code&gt;M-right&lt;/code&gt; which is used for indentation, moving columns within a table and demoting list items is not available; instead I had to use either &lt;code&gt;C-c C-x r&lt;/code&gt; shortcut or explicitly invoke the command using &lt;code&gt;M-x org-meta-right&lt;/code&gt;. Although I did not invoke this command frequently, without the shortcut I felt like I was pulled out of &lt;a href="https://en.wikipedia.org/wiki/Flow_(psychology)"&gt;the flow&lt;/a&gt; each time I had to use an alternative method of invoking the command.
&lt;/p&gt;

&lt;p&gt;
The second and by far the biggest nuisance was the lack of proper web-browsing experience. Although I most frequently landed on StackOverflow pages and although &lt;b&gt;eww&lt;/b&gt; rendered them pretty good (see image below) the lack of visual experience &lt;i&gt;I was used to&lt;/i&gt; gave me a sense of discomfort.
&lt;img src="https://rebeja.eu/images/eww-stackoverflow-2.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
However, when I got to analyze how much I have accomplished while working from terminal I was simply &lt;b&gt;amazed&lt;/b&gt;. Having no distraction and meaningless motion like cycling through windows and tabs had a huge impact on my productivity. I was able to fully concentrate and immerse in the code and by doing so I had &lt;b&gt;a lot&lt;/b&gt; of work done.
&lt;/p&gt;</description><category>Emacs</category><category>Python</category><category>terminal</category><guid>https://rebeja.eu/posts/python-development-using-emacs-from-terminal/</guid><pubDate>Thu, 28 Sep 2017 22:00:00 GMT</pubDate></item><item><title>Rename multiple files with Emacs dired</title><link>https://rebeja.eu/posts/rename-multiple-files-with-emacs-dired/</link><dc:creator>Petru Rebeja</dc:creator><description>&lt;p&gt;
While adding text files from within a folder to a project file I noticed that the files in the folder were lacking naming consistency. Namely, there were files which had the &lt;code&gt;.txt&lt;/code&gt; extension and files without extension, as shown in the image below:
&lt;img src="https://rebeja.eu/images/emacs-dired-files-without-extension.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Since there were about 100 files without extension I started asking myself: &lt;b&gt;Is there a way to add .txt extension to those files without manually renaming each one&lt;/b&gt;?
&lt;/p&gt;

&lt;p&gt;
Of course there is. Here's what I did using Emacs and &lt;code&gt;dired&lt;/code&gt;:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;M-x dired&lt;/code&gt; to the desired directory (obviously)
&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;dired&lt;/code&gt; buffer enter the &lt;b&gt;edit mode&lt;/b&gt; with &lt;code&gt;C-x C-q&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Go to the last file that has extension before the block of files without extension.
&lt;/li&gt;
&lt;li&gt;Starting from that file, place a mark and select the whole block of files without extension (the selection should include the last file with extension).
&lt;/li&gt;
&lt;li&gt;Narrow to the selected region using &lt;code&gt;M-x narrow-to-region&lt;/code&gt; or &lt;code&gt;C-x n n&lt;/code&gt; The buffer should look like the image below:
&lt;img src="https://rebeja.eu/images/emacs-dired-narrowed.png" alt="nil"&gt;
&lt;/li&gt;
&lt;li&gt;Move to the beginning of buffer using &lt;code&gt;M-&amp;lt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Start defining a new keyboard macro using &lt;code&gt;C-x (&lt;/code&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Move to next line using &lt;code&gt;C-n&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Navigate to the end of line using &lt;code&gt;C-e&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Add the &lt;code&gt;.txt&lt;/code&gt; extension
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Save the macro with &lt;code&gt;C-x )&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Now that I have a macro to add &lt;code&gt;.txt&lt;/code&gt; extension to a file name I just need to run it as many times as there are unnamed files (100 in my case). To do so just &lt;code&gt;C-u 100 F4&lt;/code&gt;. This will repeat the macro 100 times.
&lt;/li&gt;
&lt;li&gt;Once all the files are renamed exit the &lt;b&gt;narrow-region&lt;/b&gt; using &lt;code&gt;M-x widen&lt;/code&gt; or &lt;code&gt;C-x n w&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Save changes with &lt;code&gt;C-c C-c&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
That's it!
&lt;/p&gt;</description><category>dired</category><category>Emacs</category><category>rename multiple files</category><guid>https://rebeja.eu/posts/rename-multiple-files-with-emacs-dired/</guid><pubDate>Mon, 21 Aug 2017 22:00:00 GMT</pubDate></item></channel></rss>