<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rebeja</title><link>https://rebeja.eu/</link><description>Single threaded stories.</description><atom:link href="https://rebeja.eu/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2023 &lt;a href="mailto:petru.rebeja@gmail.com"&gt;Petru Rebeja&lt;/a&gt; </copyright><lastBuildDate>Mon, 27 Feb 2023 17:20:29 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Don't release to Production, release to QA</title><link>https://rebeja.eu/posts/release-to-qa-not-production/</link><dc:creator>Petru Rebeja</dc:creator><description>&lt;p&gt;
&lt;b&gt;Automate your release workflow to such extent that the QA engineers from your team become the users of the application.&lt;/b&gt;
&lt;/p&gt;

&lt;div id="outline-container-org64eb0f8" class="outline-2"&gt;
&lt;h2 id="org64eb0f8"&gt;Introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org64eb0f8"&gt;
&lt;p&gt;
It's Friday afternoon, the end of the sprint, and a few hours before the weekend starts, and the QA engineers are performing the required tests on the last Sprint Backlog Item (SBI). The developer responsible for that item, confident that the SBI meets all acceptance criteria, is already in the weekend mood.
&lt;/p&gt;

&lt;p&gt;
Suddenly, a notification pops up — there is an issue with the feature being tested. The developer jumps on it to see what the problem is, and after discussing with the QA engineer he/she finds out that the issue is caused by some leftover data from the previous SBI.
&lt;/p&gt;

&lt;p&gt;
Having identified the problem, the developer spends a few minutes to craft a SQL script that will clean the data, and gives it to the QA engineer. The QA engineer runs the script on the QA database, starts testing the SBI from the beginning, and then confirms that the system is "back to normal".
&lt;/p&gt;

&lt;p&gt;
Both sigh in relief while the SBI is marked as "Done" and the weekend starts. Bliss!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf744534" class="outline-2"&gt;
&lt;h2 id="orgf744534"&gt;Getting to the root problem&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf744534"&gt;
&lt;p&gt;
Although the day and the sprint goal were saved, I would argue that applying the cleanup script just fixed an issue but left the root problem untouched. And to get to the root problem, let's take a closer look on what happened.
&lt;/p&gt;

&lt;p&gt;
The database issue stems from the fact that instead of being kept as close as possible to production data (as the best practices suggest) the database grew to become an entity of its own through not being kept tidy by the team.
&lt;/p&gt;

&lt;p&gt;
When testing a SBI involves changing some of the data from the database, it is not very often that those changes are reverted as soon as the SBI leaves the QA environment. With each such change the two databases (production and QA) grow further and further apart, and the probability of having to apply a workaround script increases each time. However  the paradox is that the cleanup script, although it solves the issue, is &lt;i&gt;yet another change to the data&lt;/i&gt; which widens even more the gap between QA and production databases.
&lt;/p&gt;

&lt;p&gt;
And there lies our problem: not within the workaround script itself, but within the practice of applying workarounds to patch the proverbial broken pipes instead of building actual deployment pipelines.
&lt;/p&gt;

&lt;p&gt;
But this problem goes one level deeper; sure, we can fix the problem at hand by restoring the database from a production backup but to solve the issue once and for all we need to change how we look at QA environment.
&lt;/p&gt;

&lt;p&gt;
But our root-cause analysis is not complete yet. We can't just say "let's never apply workarounds" because workarounds are some sort of necessary evil. Let's look at why that is, shall we?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgedd9a05" class="outline-2"&gt;
&lt;h2 id="orgedd9a05"&gt;Why and when do we apply workarounds in production?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgedd9a05"&gt;
&lt;p&gt;
In Production environment a workaround is applied &lt;i&gt;only in critical situations&lt;/i&gt; due to high risk of breaking the running system by making ad-hoc changes to it.
&lt;/p&gt;

&lt;p&gt;
Unlike the QA environment where, when the system breaks only a few users are affected — namely the QA engineers, when the system halts in Production the costs of the downtime are much, much higher. An improper or forgotten &lt;code&gt;where&lt;/code&gt; condition in a delete script which wipes out whole tables of data, and renders the system unusable, in the happiest case will lead only to frustrated customers that can't use the thing they paid for.
&lt;/p&gt;

&lt;p&gt;
As such, in every critical situation first and foremost comes the assessment: is a workaround really needed?
&lt;/p&gt;

&lt;p&gt;
When the answer is yes (i.e., there is no other way of fixing the issue now), then &lt;i&gt;usually&lt;/i&gt; there are some procedures to follow. Sticking with the database script example, the minimal procedure would be to:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;create the workaround script,&lt;/li&gt;
&lt;li&gt;have that script &lt;i&gt;reviewed and approved by at least one additional person&lt;/i&gt;, and&lt;/li&gt;
&lt;li&gt;have the script executed on Production by someone with proper access rights.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
OK, now we're settled: workarounds are necessary &lt;i&gt;in critical situations&lt;/i&gt;, and are applied after &lt;i&gt;assessment&lt;/i&gt;, &lt;i&gt;review&lt;/i&gt;, and &lt;i&gt;approval&lt;/i&gt;. Then, going back to our story, the following question arises:
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgead6bb1" class="outline-2"&gt;
&lt;h2 id="orgead6bb1"&gt;Why do we apply workarounds in QA environment?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgead6bb1"&gt;
&lt;p&gt;
QA environment is isolated from Production environment, and by definition it has way fewer users. Furthermore, those users have a lot of technical knowledge of how the system runs, and always have something else to do (like designing/writing test cases) while the system is being brought to normal again.
&lt;/p&gt;

&lt;p&gt;
Looking from this point of view, there is almost never a &lt;i&gt;critical&lt;/i&gt; situation that would require applying a workaround in QA environment.
&lt;/p&gt;

&lt;p&gt;
Sure, missing the sprint goal may seem like a critical situation because commitments are important. But on the other hand, and going back to our example — if we're applying a workaround in QA just to promote some feature towards Production, are we &lt;i&gt;really&lt;/i&gt; sure that the feature is ready?
&lt;/p&gt;

&lt;p&gt;
Now that the assessment of criticality is done, let's get back to our topic and ask:
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf6d10d6" class="outline-2"&gt;
&lt;h2 id="orgf6d10d6"&gt;What if we treated QA environment like Production?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf6d10d6"&gt;
&lt;p&gt;
Production and QA environments are different (&lt;i&gt;very&lt;/i&gt; different I may add); there's no doubt about that. What makes them different, from the point of view of our topic, is the fact that when a feature is deployed in Production environment, &lt;i&gt;all&lt;/i&gt; the prerequisites are known, and all preliminary steps are executed.
&lt;/p&gt;

&lt;p&gt;
On the other hand, when deploying to QA environment we don't always have this knowledge, nor do we have all the preliminary steps completed at all times. Furthermore, deploying on QA may require additional steps than on Production, e.g.: restoring the database to the last backup from Production, data anonymization etc.
&lt;/p&gt;

&lt;p&gt;
But the difference between the number of unknowns can be compensated by the difference between number of deployments, and the fact that a failure in QA environment is not critical. In other words, what we lack in knowledge when deploying to QA environment can be compensated by multiple deployment trials, where each deployment trial gets closer and closer to success.
&lt;/p&gt;

&lt;p&gt;
And when it comes to doing repetitive tasks…
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9977484" class="outline-2"&gt;
&lt;h2 id="org9977484"&gt;Automation is key&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9977484"&gt;
&lt;p&gt;
To alleviate the difference between (successive) environments you only need to do one thing, although I must say from the start that achieving that one thing &lt;i&gt;can be really hard&lt;/i&gt; — &lt;b&gt;automate everything&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
If a release workflow is properly (read &lt;i&gt;fully&lt;/i&gt;) automated, then the difference between various environments is reduced mainly to:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The group of people who have proper access rights to run the workflow on the specific environment. With today's' tools on the market the difference becomes simplified further — it is in the group of people that are allowed to see or to push the "Deploy" button.&lt;/li&gt;
&lt;li&gt;The number and order of "Deploy" buttons a person has to push for the deploy to succeed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Although we strive to have our environments behave all the same, they are still inherently different. As such, it goes without saying that not everyone may have rights to deploy to Production, and — due to some constraints — on some environment there may be additional actions required to deploy. Nonetheless, the objective remains the same: &lt;i&gt;avoid manual intervention as much as possible&lt;/i&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9eb5e69" class="outline-2"&gt;
&lt;h2 id="org9eb5e69"&gt;The Snowball Effect&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9eb5e69"&gt;
&lt;p&gt;
Once achieved, the effects of this objective of having minimal manual intervention ripple through and start a &lt;a href="https://en.wikipedia.org/wiki/Snowball_effect"&gt;snowball effect&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9721ba7" class="outline-3"&gt;
&lt;h3 id="org9721ba7"&gt;Efficiency&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org9721ba7"&gt;
&lt;p&gt;
At first, you gain efficiency — there is no checklist to go through when deploying, no time needed to spend doing the tedious steps of deployment; the computers will perform those steps as quickly as possible and &lt;i&gt;always&lt;/i&gt; in the same order without skipping any of them or making the errors that humans usually do when performing tedious work.
&lt;/p&gt;

&lt;p&gt;
With a click of a button, or on a certain event the deployment starts and while it runs the people from the team are free to do whatever they want in the time it takes to deploy: they can have a cup of coffee, can make small talk with a colleague, or can mind the more important business like the overall quality of the product they're working on.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org76c64ea" class="outline-3"&gt;
&lt;h3 id="org76c64ea"&gt;Speed&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org76c64ea"&gt;
&lt;p&gt;
Furthermore, besides efficiency you can gain speed — just by delegating the deployment process to computers you gain time because computers do boring stuff a lot quicker than humans.
&lt;/p&gt;

&lt;p&gt;
With efficiency and speed comes reduced &lt;a href="https://martinfowler.com/articles/branching-patterns.html#integration-friction"&gt;integration friction&lt;/a&gt;. A common effect of reduced integration friction is an increase in integration frequency. High integration frequency coupled with workflow automation leads to an increase in the number of deployments that are made.
&lt;/p&gt;

&lt;p&gt;
And this is where the magic unravels.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org90bf8d4" class="outline-3"&gt;
&lt;h3 id="org90bf8d4"&gt;Tight feedback loop&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org90bf8d4"&gt;
&lt;p&gt;
Once you automate the repetitive tasks you free-up the time of the QA engineer, which allows him/her to spend more time with the system(s) they are testing. In other words, the time gained through workflow automation is invested into the actual Quality Assurance of the system under test.
&lt;/p&gt;

&lt;p&gt;
And when the QA engineer invests more time into the testing process, he/she will be able to spot more issues. With enough repetitions enabled by quick deployments, the QA engineer acquires a certain amount of skills which will enable him/her to spot defects faster. The sooner a defect is spotted, the sooner it is reported, and subsequently, the sooner it gets fixed.
&lt;/p&gt;

&lt;p&gt;
We have a name for this thing — it's called a &lt;i&gt;feedback loop&lt;/i&gt;. The feedback loop is not introduced by automation — it was long present in the project, but once workflow automation is introduced it tightens the feedback loop, which means we, as developers, have to wait less time to see the effects of the changes we introduced into the system. In our specific case, we have to wait less because workflow automation reduces the time of the deployment to QA environment to minimum.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf030374" class="outline-3"&gt;
&lt;h3 id="orgf030374"&gt;Improved user experience&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf030374"&gt;
&lt;p&gt;
But wait, there's more! The time that the QA engineer gets to invest into growing his/her skills is spent using the system under test. With more time spent using the system under test, the QA engineer gets closer and closer to the mindset of the real users of the system. And while in this mindset, the QA engineer not only understands what the system does for the user but also understands what the user wants to do.
&lt;/p&gt;

&lt;p&gt;
Of course, this understanding is bound by a certain maximum but nonetheless, the effect it has on the development process is enormous.
&lt;/p&gt;

&lt;p&gt;
First and foremost, there is an increase in the quality of the system: when the QA engineers have a sound understanding of what the user wants to do they will make sure that the system indeed caters to the needs of its users. This in itself is a huge win for the users alone but this also benefits the entire team — the knowledge about the system gets disseminated within the whole team (including developers), and the Product Owner (PO) is not  the bottleneck anymore.
&lt;/p&gt;

&lt;p&gt;
Furthermore, with more time spent in the mindset of a user, the QA engineer will start striving for an improved user experience because he/she, like the real users of the system, will strive to do thing faster.
&lt;/p&gt;

&lt;p&gt;
As such, the QA engineer starts suggesting some usability improvements of the system. These improvements are small — e.g., change the order of the menu items, add the ability to have custom shortcuts on the homepage etc, but they do improve the experience of the user.
&lt;/p&gt;

&lt;p&gt;
Sure, all of those changes must be  discussed with the team &lt;i&gt;and&lt;/i&gt; approved by the PO but those who get approved bring the system closer to what the &lt;i&gt;actual users&lt;/i&gt; want.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2c8e1fb" class="outline-2"&gt;
&lt;h2 id="org2c8e1fb"&gt;Allow the QA engineer to be an user of the system&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2c8e1fb"&gt;
&lt;p&gt;
The main role of a QA engineer is to ensure that the system under test satisfies the needs of its users. As such, the QA engineer needs to think like a user, to act like a user, and to be able to quickly shift from the mindset of the user to the mindset of the problem analyst required by the job description.
&lt;/p&gt;

&lt;p&gt;
But if you take from the QA engineer all the hassle of deployment and fiddling with making the system run properly in the testing environment you are unlocking more time for him/her to spend in the mindset of an actual user, and having a user of the system close by is a treasure trove for building it in such a way that the system accomplishes its purpose — catering to the needs of his users.
&lt;/p&gt;

&lt;p&gt;
As a developer, it may be strange to look at your colleague — the QA engineer — like at an user of the system you're both working on. After all, you both know a lot more of what's under the hood of that system for any of you to be considered just a simple user of it.
&lt;/p&gt;

&lt;p&gt;
But it is a change worth making. And, as the saying goes, to change the world you need to start with changing yourself. This change comes when you treat QA environment as production environment and make all the efforts needed to uphold the delivery to QA to the same rigor as delivery to production. In essence, it's nothing but a shift in the mindset that was already mentioned in the title — don't release to Production, release to QA.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://rebeja.eu/posts/release-to-qa-not-production/</guid><pubDate>Tue, 29 Nov 2022 12:14:25 GMT</pubDate></item><item><title>Keep the tools separate from the domain of your application</title><link>https://rebeja.eu/posts/separate-tools-from-domain/</link><dc:creator>Petru Rebeja</dc:creator><description>&lt;p&gt;
At my previous job we had an Architecture club where we held regular meetings to discuss issues related to the architectural decisions of various applications, be it an application developed within the company or elsewhere. One of the latest topics discussed within the architecture club was whether to use or not MediatR (and implicitly the &lt;code&gt;Mediator&lt;/code&gt; pattern) in a project based on &lt;code&gt;CQRS&lt;/code&gt; architecture.
&lt;/p&gt;

&lt;p&gt;
If you're not familiar with &lt;a href="https://github.com/jbogard/MediatR"&gt;MediatR&lt;/a&gt;, it's a library that relays messages to their destination in an easy to use and elegant manner in two ways: it dispatches requests to their handlers and sends notifications to subscribers.
&lt;/p&gt;

&lt;p&gt;
The &lt;code&gt;Mediator&lt;/code&gt; pattern itself is &lt;a href="https://www.dofactory.com/net/mediator-design-pattern"&gt;defined&lt;/a&gt; as follows:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
I'm going to step a bit back and give some additional context regarding this meeting. I wasn't able to attend the meetings of the club since mid February because the meetings overlapped with a class I teach. In an afternoon my colleague George, the founder of the club, told me that the topic of the next meeting will be whether to use or not MediatR and knowing that I use MediatR on my side project it would be nice for me to weigh-in my opinion.
&lt;/p&gt;

&lt;p&gt;
At first, I must confess, I was taken aback — for me there was never a doubt; MediatR is a great tool and &lt;span class="underline"&gt;should&lt;/span&gt; be used in a CQRS architecture. This is why I said I would really like to hear what other members have to say — especially those opposing the use of MediatR.
&lt;/p&gt;

&lt;p&gt;
As the discussion went on I concluded that the problem wasn't whether to use or not to use MediatR but rather &lt;i&gt;how it was used&lt;/i&gt;. And it was used as the centerpiece of the big ball of mud.
&lt;/p&gt;

&lt;p&gt;
The discussion started with back-referencing a presentation at a local IT event, where the same topic was put upfront: &lt;b&gt;to use or not to use MediatR&lt;/b&gt;? Afterwards, the focus of the discussion switched to a project where the mediator pattern was imposed to be used for &lt;i&gt;every&lt;/i&gt; call pertaining to business logic and even more than that — even the calls to &lt;a href="https://github.com/jbogard/automapper"&gt;&lt;code&gt;AutoMapper&lt;/code&gt;&lt;/a&gt; were handled via the mediator. In other words, the vast majority of what should have been simple method calls became calls to &lt;code&gt;mediator.Send(new SomeRequest{...})&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
In order to avoid being directly coupled to &lt;code&gt;MediatR&lt;/code&gt; library the project was hiding the original &lt;code&gt;IMediator&lt;/code&gt; interface behind a custom interface (let's call it &lt;code&gt;ICustomMediator&lt;/code&gt;) thus ensuring a low coupling to the original interface. The problem is that, although the initial intention was good, the abundance of calls to the custom mediator creates a dependency of application modules upon the custom defined interface. And this is wrong.
&lt;/p&gt;

&lt;p&gt;
Why is that wrong?, you may ask. After all, the &lt;code&gt;Dependency Inversion principle&lt;/code&gt; explicitly states that "classes should depend on interfaces" and since in the aforementioned project classes depend on an &lt;code&gt;ICustomMediator&lt;/code&gt; interface which doesn't change even when the original interface changes then it's all good, right?
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Wrong&lt;/b&gt;. That project &lt;i&gt;did not avoid coupling&lt;/i&gt;, it just changed the contract it couples to from an interface defined in a third-party library to an interface defined within. That's it; it is still tightly coupled with a single interface. Even worse, that interface has become the centerpiece of the whole application, the &lt;i&gt;God service&lt;/i&gt;, which hides the target from the caller behind at least two (vertical) layers and tangles the operations of a business transaction into a big ball of mud. While doing so, it practically obliterates the boundaries between the modules which changes application modules from being highly cohesive pieces to lumps of code which "belong together".
&lt;/p&gt;

&lt;p&gt;
Furthermore, and this is the worst part, the &lt;code&gt;ICustomMediator&lt;/code&gt; has changed its role from being a tool which relays commands to their respective handlers to being part of the application domain, i.e. the role of mediator changed from &lt;i&gt;implementation detail&lt;/i&gt; to &lt;i&gt;first class citizen&lt;/i&gt; of the application. This shift is subtle but dangerous and not that easy to observe because the change creeps in gradually akin to the gradual increase of the temperature of water in the &lt;a href="https://en.wikipedia.org/wiki/Boiling_frog"&gt;boiling frog&lt;/a&gt; fable.
&lt;/p&gt;

&lt;p&gt;
The shift happens because all the classes that need to execute a business operation which is not available as a method to invoke will have a reference to the mediator in order to call the aforementioned operation. As per &lt;a href="https://en.wikipedia.org/wiki/Law_of_Demeter"&gt;Law of Demeter&lt;/a&gt; (only talk to your immediate friends) that makes the &lt;code&gt;ICustomMediator&lt;/code&gt; a friend of &lt;i&gt;all&lt;/i&gt; the classes involved in implementing some business logic. And a friend of a domain object (entity, service etc.) &lt;i&gt;is a domain object&lt;/i&gt; itself. Or at least it should be.
&lt;/p&gt;

&lt;p&gt;
OK, you might say, then what's the &lt;i&gt;right&lt;/i&gt; way to use the mediator here? I'm glad you asked. Allow me to explain myself by taking (again) a few steps back.
&lt;/p&gt;

&lt;p&gt;
Ever since I discovered &lt;b&gt;MediatR&lt;/b&gt; I've seen it as the &lt;b&gt;great tool&lt;/b&gt; it is. I remember how, while pondering upon the examples from  MediatR documentation and how I could adapt those for my project I started running some potential usage scenarios in my head. After a short time some clustering patterns started to emerge from those usage scenarios. The patterns weren't that complicated — a handler that handles a payment registration should somehow belong together with a handler that queries the balance of an account, whereas the handler that deals with customer information should belong somewhere else.
&lt;/p&gt;

&lt;p&gt;
These patterns are nothing else than a high degree of cohesion between each of the classes implementing the &lt;code&gt;IHandler&lt;/code&gt; interface from MediatR and to isolate them I've organized each such cluster into a separate assembly.
&lt;/p&gt;

&lt;p&gt;
Having done that another pattern emerged from all the handlers within an assembly: each of the handlers were handling an operation of a single service.
&lt;/p&gt;

&lt;p&gt;
Obviously, the next logical thing was to actually define the service interface which listed all the operations performed by the handlers within that assembly. And since the interface needs an implementation I've created a class for each service which calls &lt;code&gt;mediator.Send()&lt;/code&gt; with the proper parameters for the specific handler and returns the results. This is how it looks:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public interface IAccountingService
{
    void RegisterPayment(RegisterPaymentCommand paymentDetails);

    GetAccountBalanceResponse GetAccountBalance(GetAccountBalanceRequest accountId);

    GetAllPaymentsResponse GetAllPayments();
}

class AccountingService: IAccountingService
{
    private readonly IMediator _mediator;

    public AccountingService(IMediator mediator)
    {
	_mediator = mediator;
    }

    public void RegisterPayment(RegisterPaymentCommand paymentDetails)
    {
	_mediator.Send(paymentDetails);
    }

    public GetAccountBalanceResponse GetAccountBalance(GetAccountBalanceRequest accountId)
    {
	return _mediator.Send(GetAccountBalanceRequest);
    }

    public GetAllPaymentsResponse GetAllPayments()
    {
	return _mediator.Send(new GetAllPaymentsRequest());
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
As a result I &lt;i&gt;do have more boilerplate code&lt;/i&gt; but on the upside I have:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;A separation of the domain logic from the plumbing handled by MediatR. If I want to switch the interface implemented by each handler I can use search and replace with a regex and I'm done.&lt;/li&gt;
&lt;li&gt;A cleaner service interface. For the service above, the handler that returns all payments should look like this:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class GetAllPaymentsRequest: IRequest&amp;lt;GetAllPaymentsResponse&amp;gt;
{
}

public class GetAllPaymentsResponse
{
    public IEnumerable&amp;lt;Payment&amp;gt; Payments {get; set;}
}

public GetAllPaymentsRequestHandler: RequestHandler&amp;lt;GetAllPaymentsRequest, GetAllPaymentsResponse&amp;gt;
{
    protected override GetAllPaymentsResponse Handle(GetAllPaymentsRequest request)
    {
	// ...
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
In order to call this handler you must provide an empty instance of &lt;code&gt;GetAllPaymentsRequest&lt;/code&gt; to mediator but such restriction doesn't need to be imposed on the service interface. Thus, the consumer of &lt;code&gt;IAccountingService&lt;/code&gt; calls &lt;code&gt;GetAllPayments()&lt;/code&gt; without being forced to provide an empty instance which, from consumers' point of view, is useless.
&lt;/p&gt;

&lt;p&gt;
However, the greatest benefit from introducing this new service is that &lt;i&gt;it is a domain service&lt;/i&gt; and does not break the Law of Demeter while abstracting away the technical details. Whichever class will have a reference to an instance of &lt;code&gt;IAccountingService&lt;/code&gt;, it will be working with something pertaining to the &lt;code&gt;Accounting&lt;/code&gt; domain thus when invoking a method from the &lt;code&gt;IAccountingService&lt;/code&gt; &lt;i&gt;it will call a friend&lt;/i&gt;.
&lt;/p&gt;

&lt;p&gt;
This pattern also makes the code a lot more understandable. Imposing a service over the handlers that are related to each-other unifies them and makes their purpose more clear. It's easier to understand that I need to call &lt;code&gt;subscriptionsService&lt;/code&gt; to get a subscription but it becomes a little more cluttered when I call &lt;code&gt;mediator.Send(new GetSubscriptionRequest{SubscriptionId = id})&lt;/code&gt; because it raises a lot of questions. Who gives me that subscription in the end and where it resides? Is this a database call or a network call? And who the hell is this &lt;code&gt;mediator&lt;/code&gt; dude?
&lt;/p&gt;

&lt;p&gt;
Of course, the first two questions may rise when dealing with any interface and they should be always on the mind of programmers because the implementation may affect the performance, but performance concerns aside, it's just easier to comprehend the relationships and interactions when all the details fit together. And in a class dealing with &lt;code&gt;Accounting&lt;/code&gt; domain a call to &lt;code&gt;mediator&lt;/code&gt; just doesn't fit.
&lt;/p&gt;

&lt;p&gt;
Back to the main point, there's the question of what if I &lt;i&gt;need&lt;/i&gt; to make a request through a queue (&lt;code&gt;RabbitMq&lt;/code&gt; for example)? Let's assume I have a class which needs to get some details using a call to mediator but afterwards needs to write some data to a queue within the same business transaction. In such case, I have to either:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;inject into my class an instance that knows how to talk to the queue and an instance of mediator or&lt;/li&gt;
&lt;li&gt;have another mediator handler which does the write and perform two separate calls to mediator.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
By doing this I'm polluting the application logic with entities like mediator, queue writer etc., entities which are pertaining to application infrastructure not application domain. In other words, they are tools not building blocks. And tools should be replaceable. But how do I replace them if I have references to them scattered all over the code-base? With maximum effort, as Deadpool says.
&lt;/p&gt;

&lt;p&gt;
This is why you need to separate tools from application domain. And this is how I achieved this separation: by hiding the implementation details (i.e. tooling) behind a service interface which brings meaning to the domain. This way, when you change the tools, the meaning (i.e. intention) stays the same.
&lt;/p&gt;


&lt;p&gt;
&lt;b&gt;Acknowledgments&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
I would like to thank my colleagues for their reviews of this blog post. Also a big thank you goes to all the members of Centric Architecture Club for starting the discussion which led to this blog post.
&lt;/p&gt;</description><guid>https://rebeja.eu/posts/separate-tools-from-domain/</guid><pubDate>Mon, 22 Jun 2020 13:56:02 GMT</pubDate></item><item><title>Building a Python IDE with Emacs and Docker</title><link>https://rebeja.eu/posts/python-ide-with-emacs-and-docker/</link><dc:creator>Petru Rebeja</dc:creator><description>&lt;div id="outline-container-org67e2a6a" class="outline-2"&gt;
&lt;h2 id="org67e2a6a"&gt;Prologue&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org67e2a6a"&gt;
&lt;p&gt;
I am a fan of &lt;a href="https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux"&gt;&lt;code&gt;Windows Subsystem for Linux&lt;/code&gt;&lt;/a&gt;. It brings the power of Linux command-line tools to Windows which is something a developer cannot dislike but that isn't the main reason I'm fond of it. I like it because it allows me to run Emacs (albeit in console mode) at its full potential.
&lt;/p&gt;

&lt;p&gt;
As a side-note, on my personal laptop I use Emacs on Ubuntu whereas on the work laptop I use Emacs from Cygwin. And although Cygwin does a great job in providing the powerful Linux tools on Windows, some of them are really slow compared to the native ones. An example of such a tool is &lt;code&gt;git&lt;/code&gt;. I heavily use &lt;a href="https://magit.vc/manual/magit"&gt;&lt;code&gt;Magit&lt;/code&gt;&lt;/a&gt; for a lot of my projects but working with it in Emacs on Cygwin is a real pain. Waiting for a simple operation to finish knowing that the same operation completes instantly on Linux is exhausting. Thus, in order to avoid such unpleasant experience whenever I would need to use Magit I would use it from Emacs in &lt;code&gt;Ubuntu Bash on Windows&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Furthermore, I use &lt;code&gt;Ubuntu Bash on Windows&lt;/code&gt; to work on my Python projects simply because I can do everything from within Emacs there — from editing input files in &lt;code&gt;csv-mode&lt;/code&gt;, to writing code using &lt;code&gt;elpy&lt;/code&gt; with &lt;code&gt;jedi&lt;/code&gt; and pushing the code to a GitHub repo using &lt;code&gt;magit&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
All was good until an update for Windows &lt;a href="https://github.com/microsoft/terminal/issues/210"&gt;messed up the console output on &lt;code&gt;WSL&lt;/code&gt;&lt;/a&gt; which rendered both my Python setup and Emacs unusable. And if that wasn't bad enough, I got affected by this issue before a very important deadline for one of the Python projects.
&lt;/p&gt;

&lt;p&gt;
Faced with the fact that there nothing I could do at that moment to fix the console output and in desperate need for a solution, I asked myself:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Can't I create the same setup as in &lt;code&gt;WSL&lt;/code&gt; using &lt;code&gt;Docker&lt;/code&gt;?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The answer is &lt;b&gt;Yes&lt;/b&gt;. If you want to see only the final &lt;code&gt;Dockerfile&lt;/code&gt;, head directly to the &lt;a href="https://rebeja.eu/posts/python-ide-with-emacs-and-docker/#tldr"&gt;&lt;b&gt;TL;DR&lt;/b&gt;&lt;/a&gt; section. Otherwise, please read along. In any case — thanks for reading!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1068027" class="outline-2"&gt;
&lt;h2 id="org1068027"&gt;How&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1068027"&gt;
&lt;p&gt;
Since I already have been using Emacs as a Python IDE in Ubuntu Bash, replicating this setup in Docker would imply:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;Providing remote access via &lt;code&gt;ssh&lt;/code&gt; to the container and&lt;/li&gt;
&lt;li&gt;Installing the same packages for both the OS and Emacs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
I already knew more or less how to do the later (or so I thought) so obviously I started with the former: ssh access to a Docker container.
&lt;/p&gt;

&lt;p&gt;
Luckily, Docker already has an &lt;a href="https://docs.docker.com/engine/examples/running_ssh_service/"&gt;example of running &lt;code&gt;ssh&lt;/code&gt; service&lt;/a&gt; so I started with the Dockerfile provided there. I copied the instructions into a local Dockerfile, built the image and ran the container. But when I tried to connect to the container I ran into the first issue addressed in this post:
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge93a6b7" class="outline-2"&gt;
&lt;h2 id="orge93a6b7"&gt;Issue #1: SSHD refuses connection&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge93a6b7"&gt;
&lt;p&gt;
This one was easy — there's a typo in the example provided by Docker. I figured it out after inspecting the contents of &lt;code&gt;sshd_config&lt;/code&gt; file.
&lt;/p&gt;

&lt;p&gt;
After a while I noticed that the line containing &lt;code&gt;PermitRootlogin&lt;/code&gt; was commented-out and thus &lt;code&gt;sed&lt;/code&gt; wasn't able to match the pattern and failed to replace the permission.
&lt;/p&gt;

&lt;p&gt;
Since I was connecting as &lt;code&gt;root&lt;/code&gt; the &lt;code&gt;sshd&lt;/code&gt; refused connection.
&lt;/p&gt;

&lt;p&gt;
The fix for this is to include the &lt;code&gt;#&lt;/code&gt; in the call to &lt;code&gt;sed&lt;/code&gt; as below:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  RUN sed -i &lt;span class="s1"&gt;'s/#PermitRootLogin prohibit-password/PermitRootLogin yes/'&lt;/span&gt; /etc/ssh/sshd_config
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Having done the change, I rebuilt the image and started the container. As the tutorial mentioned, I ran in console &lt;code&gt;docker port &amp;lt;container-name&amp;gt; 22&lt;/code&gt;. This command gave me the port on which to connect so I ran &lt;code&gt;ssh root@localhost -p &amp;lt;port&amp;gt;&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Success.
&lt;/p&gt;

&lt;p&gt;
Even though the &lt;code&gt;sshd&lt;/code&gt; was running and accepting connections, the fact that the root password was hard-coded in plain text &lt;i&gt;really&lt;/i&gt; bothered me so I made a small tweak to the &lt;code&gt;Dockerfile&lt;/code&gt;:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  ARG password

  RUN &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"root:&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; chpasswd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
What this does is it declares a variable &lt;code&gt;password&lt;/code&gt; whose value is supplied when building the image like this:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  docker build -t &amp;lt;image-tag&amp;gt; &lt;span class="se"&gt;\&lt;/span&gt;
	 --build-arg &lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;your-password-here&amp;gt; &lt;span class="se"&gt;\&lt;/span&gt;
	 .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
This way, the root password isn't stored in clear text and in plain-sight anymore. Now I was ready to move to the next step.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4707a12" class="outline-2"&gt;
&lt;h2 id="org4707a12"&gt;Issue #2: Activating virtual environment inside container&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4707a12"&gt;
&lt;p&gt;
The second item of my quest was to setup and activate a Python virtual environment. This environment will be used to install all the dependencies required for the project I'm working on.
&lt;/p&gt;

&lt;p&gt;
Also, this environment will be used by Emacs and &lt;code&gt;elpy&lt;/code&gt; to provide the features of an IDE.
&lt;/p&gt;

&lt;p&gt;
A this point I asked myself: do I actually need a virtual environment? The Ubuntu Docker image comes with Python preinstalled so why not install the dependencies system-wide? After all, Docker containers and images are somewhat disposable — I can always recreate the image and start a new container for another project.
&lt;/p&gt;

&lt;p&gt;
I decided I &lt;i&gt;need&lt;/i&gt; a virtual environment because otherwise things would get messy and I like well organized stuff.
&lt;/p&gt;

&lt;p&gt;
So I started looking out how to setup and activate a virtual environment inside a Docker container. And by looking up I mean googling it or, in my case — googling it with Bing.
&lt;/p&gt;

&lt;p&gt;
I got lucky since one of the first results was the article that led to my solution: &lt;a href="https://pythonspeed.com/articles/activate-virtualenv-dockerfile/"&gt;Elegantly activating a virtualenv in a Dockerfile&lt;/a&gt;. It has a great explanation of what needs to be done and what's going under the hood when activating a virtual environment.
&lt;/p&gt;

&lt;p&gt;
The changes pertaining to my config are the following:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  ENV &lt;span class="nv"&gt;VIRTUAL_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/venv
  RUN python3 -m virtualenv --python&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/python3 &lt;span class="nv"&gt;$VIRTUAL_ENV&lt;/span&gt;
  ENV &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$VIRTUAL_ENV&lt;/span&gt;&lt;span class="s2"&gt;/bin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  RUN pip install --upgrade pip setuptools wheel &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      pip install numpy tensorflow scikit-learn gensim matplotlib pyyaml matplotlib-venn &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      pip install elpy jedi rope yapf importmagic flake8 autopep8 black
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
As described in the article linked above, activating a Python virtual environment in its essence is just setting some environment variables.
&lt;/p&gt;

&lt;p&gt;
What the solution above does is to define where the virtual environment will be created and store it into the &lt;code&gt;VIRTUAL_ENV&lt;/code&gt; variable. Next, create the environment at the specified path using &lt;code&gt;python3 -m virtualenv $VIRTUAL_ENV&lt;/code&gt;. The &lt;code&gt;--python=/usr/bin/python3&lt;/code&gt; argument just makes sure that the python interpreter to use is indeed &lt;code&gt;python3&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Activating the virtual environment means just prepending its &lt;code&gt;bin&lt;/code&gt; directory to the &lt;code&gt;PATH&lt;/code&gt; variable: &lt;code&gt;ENV PATH="$VIRTUAL_ENV/bin:$PATH"&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Afterwards, just install the required packages as usual.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1c78a1c" class="outline-2"&gt;
&lt;h2 id="org1c78a1c"&gt;Issue #3: Emacs monolithic configuration file&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1c78a1c"&gt;
&lt;p&gt;
After setting up and activating the virtual environment, I needed to configure Emacs for python development to start working.
&lt;/p&gt;

&lt;p&gt;
Luckily, I have my Emacs (semi-literate) config script in a &lt;a href="https://github.com/repierre/.emacs.d"&gt;GitHub repository&lt;/a&gt; and all I need to do is jut clone the repo locally and everything should work. Or so I thought.
&lt;/p&gt;

&lt;p&gt;
I cloned the repository containing my config, which at that time was just a single file &lt;code&gt;emacs-init.org&lt;/code&gt; bootstrapped by &lt;code&gt;init.el&lt;/code&gt;, logged into the container and started Emacs.
&lt;/p&gt;

&lt;p&gt;
After waiting for all the packages to install I was greeted by a plethora of errors and warnings: some packages were failing to install due to being incompatible with the Emacs version installed in the container, some weren't properly configured to run in console and so on and so forth.
&lt;/p&gt;

&lt;p&gt;
Not willing to spend a lot of time on this (I had a deadline after all) I decided to take a shortcut: why don't I just split the configuration file such that I would be able to only activate packages related to Python development? After all, the sole purpose of this image is to have a setup where I can do some Python development the way I'm used to. Fortunately, this proved to be a good decision.
&lt;/p&gt;

&lt;p&gt;
So I split my &lt;code&gt;emacs-init.org&lt;/code&gt; file into four files: one file for tweaks and packages that I want to have everywhere, one file for &lt;code&gt;org-mode&lt;/code&gt; related stuff, one file for Python development and lastly one file for tweaks and packages that I would like when I'm using Emacs GUI. The &lt;code&gt;init.el&lt;/code&gt; file looked like this:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-initialize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-babel-load-file&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;expand-file-name&lt;/span&gt; &lt;span class="s"&gt;"~/.emacs.d/common-config.org"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-babel-load-file&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;expand-file-name&lt;/span&gt; &lt;span class="s"&gt;"~/.emacs.d/python-config.org"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-babel-load-file&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;expand-file-name&lt;/span&gt; &lt;span class="s"&gt;"~/.emacs.d/org-config.org"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-babel-load-file&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;expand-file-name&lt;/span&gt; &lt;span class="s"&gt;"~/.emacs.d/emacs-init.org"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now I can use &lt;code&gt;sed&lt;/code&gt; on the &lt;code&gt;init.el&lt;/code&gt; file to delete the lines that were loading troublesome packages:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed -i &lt;span class="s1"&gt;'/^.*emacs-init.*$/d'&lt;/span&gt; ./.emacs.d/init.el &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
sed -i &lt;span class="s1"&gt;'/^.*org-config.*$/d'&lt;/span&gt; ./.emacs.d/init.el
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
After starting a container from the new image I started getting some odd errors about failing to verify package signature. Again, googling the error message with Bing got me a quick-fix: &lt;a href="https://emacs.stackexchange.com/a/53142/14110"&gt;&lt;code&gt;(setq package-check-signature nil)&lt;/code&gt;&lt;/a&gt;. This fix is actually a security risk but since it would be applied to an isolated environment I didn't bother looking for a better way.
&lt;/p&gt;

&lt;p&gt;
However, another problem arose — how can I apply this fix without committing it to the GitHub repository?
&lt;/p&gt;

&lt;p&gt;
Looking back at how I used &lt;code&gt;sed&lt;/code&gt; to remove some lines from &lt;code&gt;init.el&lt;/code&gt; file one of the first ideas that popped into my head was to replace an empty line from &lt;code&gt;init.el&lt;/code&gt; with the quick-fix, but after giving it some more thought I decided to use a more general solution that involves a little bit of (over) engineering.
&lt;/p&gt;

&lt;p&gt;
Since I'm interested in altering Emacs behavior before installing packages it would be good to have a way to inject more Lisp code than a single line. Furthermore, in cases where such code consists of multiple lines I could just add it using Dockers' &lt;code&gt;ADD&lt;/code&gt; command instead of turning into a maintenance nightmare with multiple &lt;code&gt;sed&lt;/code&gt; calls.
&lt;/p&gt;

&lt;p&gt;
Don't get me wrong: &lt;code&gt;sed&lt;/code&gt; is great but I prefer to have large chunks of code in a separate file without the added complexity of them being intertwined with &lt;code&gt;sed&lt;/code&gt; calls.
&lt;/p&gt;

&lt;p&gt;
The solution to this problem is quite simple: before loading configuration files, check if a specific file exists; in my case it would be &lt;code&gt;config.el&lt;/code&gt; (not a descriptive name, I know) located in &lt;code&gt;.emacs.d&lt;/code&gt; directory. If file exists load it. Afterwards load the known configuration files. And since we're doing this, why not do the same for after loading the known configuration files?
&lt;/p&gt;

&lt;p&gt;
Thus, the resulting &lt;code&gt;init.el&lt;/code&gt; looks like this (I promise to fix those names sometimes):
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-initialize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;file-name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;expand-file-name&lt;/span&gt; &lt;span class="s"&gt;"config.el"&lt;/span&gt; &lt;span class="nv"&gt;user-emacs-directory&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file-exists-p&lt;/span&gt; &lt;span class="nv"&gt;file-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;load-file&lt;/span&gt; &lt;span class="nv"&gt;file-name&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-babel-load-file&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;expand-file-name&lt;/span&gt; &lt;span class="s"&gt;"~/.emacs.d/common-config.org"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-babel-load-file&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;expand-file-name&lt;/span&gt; &lt;span class="s"&gt;"~/.emacs.d/python-config.org"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-babel-load-file&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;expand-file-name&lt;/span&gt; &lt;span class="s"&gt;"~/.emacs.d/org-config.org"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-babel-load-file&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;expand-file-name&lt;/span&gt; &lt;span class="s"&gt;"~/.emacs.d/emacs-init.org"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;file-name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;expand-file-name&lt;/span&gt; &lt;span class="s"&gt;"after-init.el"&lt;/span&gt; &lt;span class="nv"&gt;user-emacs-directory&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file-exists-p&lt;/span&gt; &lt;span class="nv"&gt;file-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;load-file&lt;/span&gt; &lt;span class="nv"&gt;file-name&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now I just need to create the file and apply the fix:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"(setq package-check-signature nil)"&lt;/span&gt; &amp;gt;&amp;gt; ./.emacs.d/config.el
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
And since I can run custom code after loading the known configuration files I can set &lt;code&gt;elpy-rpc-virtualenv-path&lt;/code&gt; variable in the same way:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"(setq elpy-rpc-virtualenv-path \"&lt;/span&gt;&lt;span class="nv"&gt;$VIRTUAL_ENV&lt;/span&gt;&lt;span class="s2"&gt;\")"&lt;/span&gt; &amp;gt;&amp;gt; ./.emacs.d/after-init.el
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The Dockerfile code for this section is below:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;RUN cd /root/ &amp;amp;&amp;amp; \
    git clone https://github.com/RePierre/.emacs.d.git .emacs.d &amp;amp;&amp;amp; \
    echo "(setq package-check-signature nil)" &amp;gt;&amp;gt; ./.emacs.d/config.el &amp;amp;&amp;amp; \
    sed -i '/^.*emacs-init.*$/d' ./.emacs.d/init.el &amp;amp;&amp;amp; \
    sed -i 's/(shell . t)/(sh . t)/' ./.emacs.d/common-config.org &amp;amp;&amp;amp; \
    sed -i '/^.*org-config.*$/d' ./.emacs.d/init.el &amp;amp;&amp;amp; \
    sed -i 's/\:defer\ t//' ./.emacs.d/python-config.org &amp;amp;&amp;amp; \
    echo "(setq elpy-rpc-virtualenv-path \"$VIRTUAL_ENV\")" &amp;gt;&amp;gt; ./.emacs.d/after-init.el
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
It does one more thing not mentioned previously: a &lt;code&gt;sed&lt;/code&gt; call to remove lazy loading of packages from &lt;code&gt;python-config.org&lt;/code&gt; file.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8f672c4" class="outline-2"&gt;
&lt;h2 id="org8f672c4"&gt;Issue #4: Using SSH keys to connect to GitHub&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8f672c4"&gt;
&lt;p&gt;
Now that I have Emacs running on Ubuntu (albeit terminal only) I can enjoy a smooth workflow without having to wait too much for Magit or other application that took forever on Cygwin to finish.
&lt;/p&gt;

&lt;p&gt;
But there's an issue. I mount the repository I'm working on as a separate volume in the Docker container which allows &lt;code&gt;Magit&lt;/code&gt; to read all required info (like user name etc.) directly from the repository. However, I cannot push changes to GitHub because I'm not authorized.
&lt;/p&gt;

&lt;p&gt;
To authorize the current container to push to GitHub I need to generate a pair of keys for the SSH authentication on GitHub. But this can become, again, a maintenance chore: for each new container I need to create the keys, add them to my GitHub account and &lt;b&gt;remember to delete them when I'm finished with the container&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
Instead of generating new keys each time, I decided to reuse the keys I already added to my GitHub account; the image I'm building will not leave my computer so there's no risk of someone getting ahold of my keys.
&lt;/p&gt;

&lt;p&gt;
I found how to do so easily: there's a StackOverflow &lt;a href="https://stackoverflow.com/a/42125241/844006"&gt;answer&lt;/a&gt; for that. Summing it up is that you need to declare two build arguments that will hold the values for the private and public keys and write the values to their respective files. Of course, this implies creating the proper directories and assigning proper rights to the files. As an added bonus, the &lt;a href="https://stackoverflow.com/a/42125241/844006"&gt;answer&lt;/a&gt; shows a way to add GitHub to the known hosts.  This is how it looks in the Dockerfile:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  ARG ssh_prv_key
  ARG ssh_pub_key

  RUN mkdir -p /root/.ssh &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      chmod &lt;span class="m"&gt;0700&lt;/span&gt; /root/.ssh &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      ssh-keyscan github.com &amp;gt; /root/.ssh/known_hosts
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
To provide the values for the keys use &lt;code&gt;--build-arg&lt;/code&gt; parameter when building your image like this:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  docker build -t &amp;lt;image-tag&amp;gt; &lt;span class="se"&gt;\&lt;/span&gt;
	 --build-arg &lt;span class="nv"&gt;ssh_prv_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;cat ~/.ssh/id_rsa&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
	 --build-arg &lt;span class="nv"&gt;ssh_pub_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;cat ~/.ssh/id_rsa.pub&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
	 .
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org70e4730" class="outline-2"&gt;
&lt;h2 id="org70e4730"&gt;Issue #5: Install Emacs packages once and done&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org70e4730"&gt;
&lt;p&gt;
After another build of the Docker image I started a container from it, logged in via ssh into the container, started Emacs and noticed yet another issue.
&lt;/p&gt;

&lt;p&gt;
The problem was that at each start of the container I had to wait for Emacs to download and install all the packages from the configuration files which, as you can guess may take a while.
&lt;/p&gt;

&lt;p&gt;
Since looking-up the answer on the Web did not return any meaningful results I started refining my question to the point where I came-up with the answer. Basically, when after several failed attempts I started typing in the search bar &lt;code&gt;how to load Emacs packages in background&lt;/code&gt; I remembered reading somewhere that Emacs can be used in a client-server setup where the server runs in background.
&lt;/p&gt;

&lt;p&gt;
This is a feature of Emacs called &lt;a href="https://www.emacswiki.org/emacs/EmacsAsDaemon"&gt;daemon mode&lt;/a&gt;. I have never used it myself but went on a whim and decided to try it just to see what would happen.
&lt;/p&gt;

&lt;p&gt;
So I changed my &lt;code&gt;Dockerfile&lt;/code&gt; to start Emacs as a daemon:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  RUN emacs --daemon
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
And to my great surprise, when rebuilding the image I saw the output of Emacs packages being downloaded and installed.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga09a739" class="outline-2"&gt;
&lt;h2 id="orga09a739"&gt;Issue #6: Terminal colors&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga09a739"&gt;
&lt;p&gt;
Being confident that everything should work now (it's the same setup I had on &lt;code&gt;WSL&lt;/code&gt;) I started a new container to which I mounted the GitHub repo as a volume and got cracking.
&lt;/p&gt;

&lt;p&gt;
Everything went swell until I decided to commit the changes and invoked &lt;code&gt;magit-status&lt;/code&gt;. Then I got a real eyesore: the colors of the text in the status buffer were making it really hard to understand what changed and where.
&lt;/p&gt;

&lt;p&gt;
At this point I just rage-quit and started looking for an answer. Fortunately, the right &lt;a href="https://stackoverflow.com/a/64585/844006"&gt;StackOverflow answer&lt;/a&gt; popped up quickly and I applied the fix which just sets the &lt;code&gt;TERM&lt;/code&gt; environment variable:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  ENV &lt;span class="nv"&gt;TERM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;xterm-256color
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And only after this, I was able to fully benefit from having the Python IDE I'm used to on a native platform.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8b2e82b" class="outline-2"&gt;
&lt;h2 id="tldr"&gt;&lt;a id="org8b2e82b"&gt;&lt;/a&gt;TL;DR&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-tldr"&gt;
&lt;p&gt;
The full Dockerfile described in this post is below:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FROM ubuntu:18.04

RUN apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apt-get install -y --no-install-recommends openssh-server tmux &lt;span class="se"&gt;\&lt;/span&gt;
	    emacs emacs-goodies.el curl git &lt;span class="se"&gt;\&lt;/span&gt;
	    python3 python3-pip python3-virtualenv python3-dev build-essential

ARG password

RUN mkdir /var/run/sshd
RUN &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"root:&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; chpasswd
RUN sed -i &lt;span class="s1"&gt;'s/#PermitRootLogin prohibit-password/PermitRootLogin yes/'&lt;/span&gt; /etc/ssh/sshd_config

&lt;span class="c1"&gt;# SSH login fix. Otherwise user is kicked off after login&lt;/span&gt;
RUN sed &lt;span class="s1"&gt;'s@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g'&lt;/span&gt; -i /etc/pam.d/sshd

ENV NOTVISIBLE &lt;span class="s2"&gt;"in users profile"&lt;/span&gt;
RUN &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"export VISIBLE=now"&lt;/span&gt; &amp;gt;&amp;gt; /etc/profile

&lt;span class="c1"&gt;# From https://pythonspeed.com/articles/activate-virtualenv-dockerfile/&lt;/span&gt;
ENV &lt;span class="nv"&gt;VIRTUAL_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/venv
RUN python3 -m virtualenv --python&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/python3 &lt;span class="nv"&gt;$VIRTUAL_ENV&lt;/span&gt;
ENV &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$VIRTUAL_ENV&lt;/span&gt;&lt;span class="s2"&gt;/bin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
RUN pip install --upgrade pip setuptools wheel &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    pip install numpy tensorflow scikit-learn gensim matplotlib pyyaml matplotlib-venn &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    pip install elpy jedi rope yapf importmagic flake8 autopep8 black

RUN &lt;span class="nb"&gt;cd&lt;/span&gt; /root/ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    git clone https://github.com/RePierre/.emacs.d.git .emacs.d &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"(setq package-check-signature nil)"&lt;/span&gt; &amp;gt;&amp;gt; ./.emacs.d/config.el &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    sed -i &lt;span class="s1"&gt;'/^.*emacs-init.*$/d'&lt;/span&gt; ./.emacs.d/init.el &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    sed -i &lt;span class="s1"&gt;'s/(shell . t)/(sh . t)/'&lt;/span&gt; ./.emacs.d/common-config.org &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    sed -i &lt;span class="s1"&gt;'/^.*org-config.*$/d'&lt;/span&gt; ./.emacs.d/init.el &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    sed -i &lt;span class="s1"&gt;'s/\:defer\ t//'&lt;/span&gt; ./.emacs.d/python-config.org &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"(setq elpy-rpc-virtualenv-path \"&lt;/span&gt;&lt;span class="nv"&gt;$VIRTUAL_ENV&lt;/span&gt;&lt;span class="s2"&gt;\")"&lt;/span&gt; &amp;gt;&amp;gt; ./.emacs.d/after-init.el

&lt;span class="c1"&gt;# From https://stackoverflow.com/a/42125241/844006&lt;/span&gt;
ARG ssh_prv_key
ARG ssh_pub_key
&lt;span class="c1"&gt;# Authorize SSH Host&lt;/span&gt;
RUN mkdir -p /root/.ssh &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    chmod &lt;span class="m"&gt;0700&lt;/span&gt; /root/.ssh &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    ssh-keyscan github.com &amp;gt; /root/.ssh/known_hosts

&lt;span class="c1"&gt;# Add the keys and set permissions&lt;/span&gt;
RUN &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$ssh_prv_key&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &amp;gt; /root/.ssh/id_rsa &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$ssh_pub_key&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &amp;gt; /root/.ssh/id_rsa.pub &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    chmod &lt;span class="m"&gt;600&lt;/span&gt; /root/.ssh/id_rsa &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    chmod &lt;span class="m"&gt;600&lt;/span&gt; /root/.ssh/id_rsa.pub

RUN emacs --daemon

&lt;span class="c1"&gt;# Set terminal colors https://stackoverflow.com/a/64585/844006&lt;/span&gt;
ENV &lt;span class="nv"&gt;TERM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;xterm-256color

EXPOSE &lt;span class="m"&gt;22&lt;/span&gt;
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"/usr/sbin/sshd"&lt;/span&gt;, &lt;span class="s2"&gt;"-D"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
To build the image use this command:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker build -t &amp;lt;image-tag&amp;gt; &lt;span class="se"&gt;\&lt;/span&gt;
       --build-arg &lt;span class="nv"&gt;ssh_prv_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;cat ~/.ssh/id_rsa&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
       --build-arg &lt;span class="nv"&gt;ssh_pub_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;cat ~/.ssh/id_rsa.pub&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
       --build-arg &lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;your-password-here&amp;gt; &lt;span class="se"&gt;\&lt;/span&gt;
       .
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org807da45" class="outline-2"&gt;
&lt;h2 id="org807da45"&gt;Epilogue&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org807da45"&gt;
&lt;p&gt;
Looking back at this sort of quest of mine, I have nothing else to say than it was, overall, a fun experience.
&lt;/p&gt;

&lt;p&gt;
Sure, it also has some additional benefits that are important in my day-to-day life as a developer: I got a bit more experience in building &lt;code&gt;Docker&lt;/code&gt; images and I &lt;i&gt;got to learn a big deal of stuff&lt;/i&gt;. It is also worth noting that this setup did help me a lot in meeting the deadline, a fact which by itself states how much of an improvement this setup is (also taking in consideration the time I've spent to make it work).
&lt;/p&gt;

&lt;p&gt;
But the bottom line is that it was a great deal of fun involved which luckily resulted in a new tool in my shed — while working on this post, I used this setup as the default for all new Python experiments and I will probably use it for future projects as well.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org73d8e54" class="outline-2"&gt;
&lt;h2 id="org73d8e54"&gt;References&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org73d8e54"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/examples/running_ssh_service/"&gt;Dockerize an SSH service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pythonspeed.com/articles/activate-virtualenv-dockerfile/"&gt;Elegantly activating a virtualenv in a Dockerfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/a/42125241/844006"&gt;SO answer on using SSH keys inside Docker container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/a/64585/844006"&gt;Setting terminal colors in Emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3170228" class="outline-2"&gt;
&lt;h2 id="org3170228"&gt;Acknowledgments&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3170228"&gt;
&lt;p&gt;
I would like to thank my colleague &lt;a href="https://www.linkedin.com/in/ionelabarbuta/"&gt;Ionela Bărbuță&lt;/a&gt; for proofreading this post and for the tips &amp;amp; tricks she gave me in order to improve my writing.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>Docker</category><category>Dockerfile</category><category>Emacs</category><category>IDE</category><category>Python</category><category>ssh</category><guid>https://rebeja.eu/posts/python-ide-with-emacs-and-docker/</guid><pubDate>Tue, 03 Mar 2020 05:19:45 GMT</pubDate></item><item><title>Declutter the way of working</title><link>https://rebeja.eu/posts/declutter-the-way-of-working/</link><dc:creator>Petru Rebeja</dc:creator><description>&lt;p&gt;
Like many other people I strive to be as productive as I can. Being productive means two things for me:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Getting the most out of my tools and,&lt;/li&gt;
&lt;li&gt;Spending less time on useless things.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Getting the most of my tools is the reason I continuously invest in learning &lt;a href="https://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; (which has proven to have a great return of investment) and in learning &lt;a href="http://visualstudioshortcuts.com/2017/"&gt;Visual Studio shortcuts.&lt;/a&gt; It was for the same reason I was happy like a kid with a chocolate bar when Visual Studio introduced the &lt;code&gt;Ctrl+Q&lt;/code&gt; shortcut for the &lt;code&gt;Quick Launch&lt;/code&gt; menu which allowed me to launch various utilities from Visual Studio without bothering to learn shortcuts that aren't often used and without spending time navigating through the menu items looking for the one I had in mind.
&lt;/p&gt;

&lt;p&gt;
Spending less time on useless things means having a good workflow and &lt;i&gt;I was not happy with mine&lt;/i&gt;. And my workflow was quite simple — after getting to work, I would start my workstation, open Outlook and whatever instant messaging applications I needed to use, open Visual Studio, get latest sources from TFS, open required solutions and start coding. In between any of those steps I would make myself a cup of tea from which I would sip occasionally while working. It took me some time to do all those required steps before being able to actually read, write or debug some piece of code and albeit in time I got ahold of more powerful machines which loaded things faster, I wasn't happy with the sensation of &lt;i&gt;having to wait to start working&lt;/i&gt;.
&lt;/p&gt;

&lt;p&gt;
I started thinking on how to avoid waiting and I turned to the simplest solution for my problem — for every application that I needed to start at the beginning of the day I would put a shortcut in the Windows startup folder. This way, after getting to work I needed to boot my computer, log in and go make the tea while the applications were loading automatically. I couldn't load &lt;i&gt;all&lt;/i&gt; the required applications that way — most of the time I needed to run Visual Studio with elevated permissions which halted the load of other applications due to the UAC settings — but I was happy to open all other applications automatically while making my tea and open Visual Studio manually.
&lt;/p&gt;

&lt;p&gt;
Meanwhile I switched the workstation with a laptop and got the opportunity to work on a data science project at work, alongside the main project I'm assigned to. Having a laptop brings a great deal of flexibility and having a high-performance laptop with great battery life tends to make me want to work on it for &lt;i&gt;all&lt;/i&gt; my projects.
&lt;/p&gt;

&lt;p&gt;
And that's when things started to get complicated workflow-wise. The two projects I work on at my job have different technology stacks (&lt;code&gt;C#&lt;/code&gt; with &lt;code&gt;.net core&lt;/code&gt; on the main project and &lt;code&gt;Python&lt;/code&gt; with &lt;code&gt;Azure ML&lt;/code&gt; for the data science one) which means different workflows but still using the same applications for communication and other secondary tasks. In my spare time — early in the morning or late at night — I work on personal projects and that's when I feel the most infuriated with the plethora of applications that are starting automatically but are totally useless at that moment and do nothing more than consume resources.
&lt;/p&gt;

&lt;p&gt;
At some point I realized that the time I used to spend a while ago to open the applications I needed, I now waste on closing the applications which are configured to start automatically but are of no use to me. Then I remembered that a while ago I read a &lt;a href="https://bash.im/quote/436725"&gt;story about Russian DevOps engineer who would automate a task if it required more that 1.5 minutes of his time&lt;/a&gt; (the English version and implementations of the scripts are available on &lt;a href="https://github.com/NARKOZ/hacker-scripts"&gt;GitHub&lt;/a&gt;). That story got me thinking:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Can I change which applications are loaded automatically based on the project I'm working?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Unfortunately, the answer is &lt;b&gt;no&lt;/b&gt;. That's because my laptop won't know on which project I'll be working next. But my schedule might give a hint: all week except Thursday, from 9:00 to 18:00 I work on the main project at my job, on Thursdays from 9:00 to 18:00 I work on a secondary project and outside business hours I work on my other projects.
&lt;/p&gt;

&lt;p&gt;
OK, and how do I use that information? Up until now I used to place shortcuts in Windows startup folder but that doesn't do it for me anymore. The problem with placing shortcuts in Windows startup folder is that there's no way to specify &lt;i&gt;when&lt;/i&gt; to start the application — it will start all the time.
&lt;/p&gt;

&lt;p&gt;
So I had to look elsewhere for a solution. The next place I looked was Windows Task Scheduler which provides more options for starting a task but unfortunately the triggers of Task Scheduler are either too simple to encode the ranges from my schedule or too complicated to bother with.
&lt;/p&gt;

&lt;p&gt;
Thinking of how to make this decision simple I turned to PowerShell. I created two scripts, in each of them testing the following conditions:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Is current time between 9:00 and 18:00 and current day is a work day but not Thursday? If yes, then this means I'm at my job, working for the main project and thus:
&lt;ul class="org-ul"&gt;
&lt;li&gt;The first script will:
&lt;ul class="org-ul"&gt;
&lt;li&gt;navigate to the directory mapped to TFS project,&lt;/li&gt;
&lt;li&gt;get latest version and&lt;/li&gt;
&lt;li&gt;open the solution in Visual Studio.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The second script will load other work-related applications like Outlook, MS Teams etc.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Is current day Thursday and time is between 9:00 and 18:00? If yes, then I'm at my job working on the data science project and:
&lt;ul class="org-ul"&gt;
&lt;li&gt;The first script will open &lt;code&gt;Ubuntu bash&lt;/code&gt; from &lt;code&gt;WSL&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The second script will open the &lt;code&gt;Azure ML workspace&lt;/code&gt; in a browser.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Each of these scripts is invoked by Windows Task Scheduler at logon; the only difference being that the first one is executed with elevated privileges. I still need to run Visual Studio as administrator and by running the script with highest privileges I don't get the UAC dialog anymore.
&lt;/p&gt;

&lt;p&gt;
None of the aforementioned scripts do anything outside working hours — in that period I choose on which project to work based on what I feel like doing (to keep me engaged after a day at work) and various other factors. But the fact that, in those late or early hours I don't need to close some pesky little applications that keep distracting me, makes me be happy again with my workflow.
&lt;/p&gt;</description><guid>https://rebeja.eu/posts/declutter-the-way-of-working/</guid><pubDate>Thu, 12 Sep 2019 15:25:23 GMT</pubDate></item><item><title>EUROLAN 2019 Summer School</title><link>https://rebeja.eu/posts/eurolan-2019/</link><dc:creator>Petru Rebeja</dc:creator><description>&lt;p&gt;
I started drafting this post in the last day of &lt;a href="http://eurolan.info.uaic.ro/2019/index.html"&gt;EUROLAN 2019 Summer School&lt;/a&gt;; while the participants were about to take the last &lt;a href="https://kahoot.it/"&gt;Kahoot!&lt;/a&gt; quiz and fill the feedback form.
&lt;/p&gt;

&lt;p&gt;
This was the first summer school where I was on the other side — in the organization committee and I have to admit that I liked it very much.
&lt;/p&gt;

&lt;p&gt;
I liked the joy and enthusiasm of the participants which were as if they embarked for an adventure. Is some sense, this was an adventure for them, which could be seen from their attitude for handling the exercices — each task was tackled with maximum involvment and seriosity by everyone.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://rebeja.eu/images/eurolan2019.jpg" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
The exercices were meant to cover a wide range of activities for computational linguistics — from manually annotating a small corpus of trainig phrases to training a machine learning model.
&lt;/p&gt;

&lt;p&gt;
The mission of our micro-team (&lt;a href="https://github.com/tiberiu44"&gt;Tiberiu Boroș&lt;/a&gt;, &lt;a href="https://github.com/cristian904"&gt;Cristian Pădurariu&lt;/a&gt; and myself) was to teach the participants how to train a Machine Learning model using &lt;a href="https://github.com/adobe/NLP-Cube"&gt;NLP-Cube&lt;/a&gt; - a Natural Language Processing Framework where Tiberiu is the main contributor.
&lt;/p&gt;

&lt;p&gt;
Knowing that there will be participants with both Windows and Mac OS, we settled in our discussions on enclosing &lt;a href="https://github.com/RePierre/eurolan-2019"&gt;&lt;code&gt;NLP-Cube&lt;/code&gt; into a Docker image&lt;/a&gt; which would be built by each participant in order to train the model.
&lt;/p&gt;

&lt;p&gt;
Unfortunately, despite our best efforts and the great presentation made by Tiberiu the results were disastrous — the laptops of over a half of participants didn't met Docker requirements; from the reamaining people a lot did not have enough disk space for the various transformations of the corpus and additional utilities. Overall, only a few persons were able to start the training process.
&lt;/p&gt;

&lt;p&gt;
At the end of the school, the organization committee setup a small contest with for the participants: each team would have to come up with an idea of an application and after refining the idea they would get exactly 5 minutes to pitch the idea to the ad-hoc jury. The application was subject to the constraints of being somewhat feasible to develop and should use as many topics taught during the summer school as possible.
&lt;/p&gt;

&lt;p&gt;
The ideas were great; the one that I liked the most was about an application that would do speech recognition for people suffering from some form of heavy speech impediment.
&lt;/p&gt;

&lt;p&gt;
When a part of the jury went to deliberate over which team should get which prize, &lt;a href="https://www.facebook.com/gabihaja"&gt;Gabriela Haja&lt;/a&gt; started the closing speech. It was a simple, elegant and beautifull talk where she praised the ideas of the participants but also advised them that they would need to work hard on the ideas themselves and on the skills of the authors in order to see their idea put to practice.
&lt;/p&gt;

&lt;p&gt;
Overall it was a great experience and I'm gratefull for the opportunity to participate. And now with the school long gone, I'm reviewing/archiving the to-do-list of activities for the summer school and building the list of…
&lt;/p&gt;

&lt;div id="outline-container-org1438299" class="outline-2"&gt;
&lt;h2 id="org1438299"&gt;Lessons learned&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1438299"&gt;
&lt;dl class="org-dl"&gt;
&lt;dt&gt;Infrastructure &lt;i&gt;is&lt;/i&gt; a problem&lt;/dt&gt;&lt;dd&gt;We learned the hard way that not everyone has high-end laptops that can run resource-heavy applications.&lt;/dd&gt;
&lt;dt&gt;Murphy's law is still applicable&lt;/dt&gt;&lt;dd&gt;"Anything that can go wrong, will go wrong", Murphy's las states. And indeed, we had a participant that couldn't build the docker image for some reason but when we tried to load an already built image into docker via a USB stick, the USB port failed.&lt;/dd&gt;
&lt;dt&gt;Think and tailor your workshop for the audience&lt;/dt&gt;&lt;dd&gt;Being heavily involvment into software development, Tiberiu and I made some wrong assumptions — &lt;i&gt;people will know how to install Docker on their machines&lt;/i&gt;, &lt;i&gt;the participants will know how to execute the command lines we provided&lt;/i&gt; etc. The vast majority of the participants were linguists at core and such tasks that are perceived as trivial by us are surely not trivial for them.&lt;/dd&gt;
&lt;dt&gt;You learn a lot while teaching&lt;/dt&gt;&lt;dd&gt;This is something that cannot be overstated. I knew I will be learning a lot of new stuff from the collaboration with Tiberiu (I did not knew &lt;code&gt;NLP-Cube&lt;/code&gt; existed befor this summer school) but to my great suprise I also learned a great deal of stuff just by being present and helping people.&lt;/dd&gt;
&lt;dt&gt;Allow yourself to fail&lt;/dt&gt;&lt;dd&gt;The dissapointing results of our endeavor to train a Machine Learning model had an impact on my morale but while discussing with the more experienced members of the committee (who were also in charge with feedback analysis) I found out that it wasn't as bad as I thought it was; the attendees were really happy to come in contact with Machine Learning, which, despite technical difficulties, is better than no contact at all.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://rebeja.eu/posts/eurolan-2019/</guid><pubDate>Fri, 24 May 2019 11:49:19 GMT</pubDate></item><item><title>Automating custom workflow in Emacs</title><link>https://rebeja.eu/posts/automating-custom-workflow-in-emacs/</link><dc:creator>Petru Rebeja</dc:creator><description>&lt;p&gt;
Due to the lack of human resources in a research project I'm involved the team decided to take upon itself the semantic comparison of 3000 pairs of papers from the medical domain.
&lt;/p&gt;

&lt;p&gt;
Each paper is a &lt;code&gt;json&lt;/code&gt; file with structured contents of the publication like in the picture below:
&lt;img src="https://rebeja.eu/images/publication-json.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Since we also want to do &lt;span class="underline"&gt;at least some&lt;/span&gt; cross-validation we decided that each member of the team should compare 2000 pairs of publications so that each pair will be compared by two out of three persons from the team.
So we split the 3000 publication pairs into 3 sets which were saved into &lt;code&gt;csv&lt;/code&gt; files with the following structure: &lt;code&gt;file1, file2, similarity_score&lt;/code&gt;; where &lt;code&gt;file1&lt;/code&gt; and &lt;code&gt;file2&lt;/code&gt; are the names of the files and &lt;code&gt;similarity_score&lt;/code&gt; is to be filled with the semantic similarity score.
&lt;/p&gt;

&lt;p&gt;
My first idea was to have Emacs split into three windows to allow for both registering the score and a side-by-side comparison of files:
&lt;img src="https://rebeja.eu/images/comparison-layout.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
For each pair of files from the left window I would:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;Copy the name of the first file using &lt;code&gt;C-a C-SPC C-u 2 M-f M-w&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Go the the top window on the right using &lt;code&gt;C-x o 2&lt;/code&gt; (I'm using &lt;code&gt;ace-window&lt;/code&gt; thus after pressing &lt;code&gt;C-x o&lt;/code&gt; I can select the window to switch to by pressing it's number key)&lt;/li&gt;
&lt;li&gt;Open the file using &lt;code&gt;C-x C-f&lt;/code&gt; then navigating to the directory and yanking the file name at the end&lt;/li&gt;
&lt;li&gt;Move back to the first window using &lt;code&gt;C-x o 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Copy the name of the second file by first moving over the first comma with &lt;code&gt;C-f&lt;/code&gt; then &lt;code&gt;C-u 2 M-f M-w&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Go to the bottom window on the right using &lt;code&gt;C-x o 3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Repeat step 3&lt;/li&gt;
&lt;li&gt;Repeat step 4&lt;/li&gt;
&lt;li&gt;Compare publications and register score in &lt;code&gt;similarity_score&lt;/code&gt; column&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Although this workflow seems quite laborious due to so many steps I've gotten used quite rapidly (from the second pair) to it and managed to form some sort of temporary muscle memory for opening files in the sense that I was doing that on full auto-pilot, &lt;i&gt;without thinking that I'm opening files&lt;/i&gt;.
&lt;/p&gt;

&lt;p&gt;
However, there was a problem with this workflow: the directory in which the files to be compared are located contains around 100 K such &lt;code&gt;json&lt;/code&gt; files and on my 5400 RPM hard-disk it took what seemed like forever to scan the directory when pressing &lt;code&gt;C-x C-f&lt;/code&gt; in order to give me the benefit of autocompletion which I did not need because I &lt;i&gt;already knew the files names&lt;/i&gt;. So basically for each pair of publications I was stuck waiting twice for the directory to be scanned.
&lt;/p&gt;

&lt;p&gt;
And then I got an idea: &lt;b&gt;I already knew the file names; the directory containing them is the same so wouldn't it be faster to send the full path (obtained by concatenating file name and directory path) to &lt;code&gt;find-file&lt;/code&gt; function instead of waiting for a directory scan?&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
I switched to the &lt;code&gt;*scratch*&lt;/code&gt; buffer and evaluated a &lt;code&gt;find-file&lt;/code&gt; call with the full path of a file and of course, the file was loaded instantly.
&lt;/p&gt;

&lt;p&gt;
So I decided to take it a bit further: &lt;b&gt;Can't I, while on a line in left window open the files on that line in the other two windows?&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
Of course I can because &lt;b&gt;Emacs is awesome&lt;/b&gt;. All I need to do is write some code lisp code that will do what I want.
&lt;/p&gt;

&lt;p&gt;
Fisrt things first, I declared a (global) variable to hold the full path to the directory containing the files:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defvar&lt;/span&gt; &lt;span class="nv"&gt;*compare-publications-dir*&lt;/span&gt;
  &lt;span class="s"&gt;"&amp;lt;directory-path&amp;gt;"&lt;/span&gt;
  &lt;span class="s"&gt;"The location of files to compare."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
Then I created a function to get the whole line from the &lt;code&gt;csv&lt;/code&gt; file:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;get-current-line&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;progn&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;beginning-of-visual-line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;end-of-visual-line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;buffer-substring-no-properties&lt;/span&gt; &lt;span class="nv"&gt;start&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
This function moves the point to the beginning of the line by calling &lt;code&gt;(beginning-of-visual-line)&lt;/code&gt; then saves the position in a local variable &lt;code&gt;start&lt;/code&gt; and moves to the end of the line via a call to &lt;code&gt;(end-of-visual-line)&lt;/code&gt;. In the end it returns the substring which is between &lt;code&gt;start&lt;/code&gt; position and the position returned by &lt;code&gt;(point)&lt;/code&gt; function.
&lt;/p&gt;

&lt;p&gt;
Having the line of text I need to:
a) Split the line by &lt;code&gt;,&lt;/code&gt;
b) Store first and second parts of the line into two variables called &lt;code&gt;file-1&lt;/code&gt; and &lt;code&gt;file-2&lt;/code&gt;
c) Move to the top-right window
d) Concatenate the values of &lt;code&gt;*compare-publications-dir*&lt;/code&gt; and &lt;code&gt;file-1&lt;/code&gt; and pass the result to &lt;code&gt;(find-file-readonly)&lt;/code&gt; (I don't want to accidentally change the files being compared)
e) Move to the bottom-right window
f) Repeat d) with &lt;code&gt;file-2&lt;/code&gt; instead of &lt;code&gt;file-1&lt;/code&gt;
g) Return to the left window
&lt;/p&gt;

&lt;p&gt;
This was also implemented with a function which can be called interactively via &lt;code&gt;M-x&lt;/code&gt;:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;compare-publications&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let* &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;files&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;csv-split-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-current-line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;","&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file-1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;car &lt;/span&gt;&lt;span class="nv"&gt;files&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file-2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;car &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cdr &lt;/span&gt;&lt;span class="nv"&gt;files&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;other-window&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;find-file-read-only&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="nv"&gt;*compare-publications-dir*&lt;/span&gt; &lt;span class="nv"&gt;file-1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;other-window&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;find-file-read-only&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="nv"&gt;*compare-publications-dir*&lt;/span&gt; &lt;span class="nv"&gt;file-2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;other-window&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And that's it. After calling &lt;code&gt;eval&lt;/code&gt; on the functions above I have an automated workflow. Now, to compare two files, I just navigate to a line in the &lt;code&gt;csv&lt;/code&gt; file and from there type &lt;code&gt;M-x compare-publications&lt;/code&gt;. The only thing left to do manually (beside the comparison itself) is to press the key for the &lt;code&gt;similarity_score&lt;/code&gt; of files from that line.
&lt;/p&gt;</description><category>automation</category><category>awesome</category><category>custom workflow</category><category>Emacs</category><guid>https://rebeja.eu/posts/automating-custom-workflow-in-emacs/</guid><pubDate>Sat, 02 Jun 2018 22:00:00 GMT</pubDate></item><item><title>ServiceActivationException when auto-starting WCF services with AutofacServiceHostFactory</title><link>https://rebeja.eu/posts/serviceactivationexception-autofacservicehostfactory/</link><dc:creator>Petru Rebeja</dc:creator><description>&lt;p&gt;
I switched teams at work and as a welcome gift into the new team I got to investigate the following error:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
  Exception: System.ServiceModel.ServiceActivationException: The service '/AuthorisationService.svc' cannot be activated due to an exception during compilation.  The exception message is: The AutofacServiceHost.Container static property must be set before services can be instantiated.. —&amp;gt; System.InvalidOperationException: The AutofacServiceHost.Container static property must be set before services can be instantiated.
   at Autofac.Integration.Wcf.AutofacHostFactory.CreateServiceHost(String constructorString, Uri[] baseAddresses)
   at System.ServiceModel.ServiceHostingEnvironment.HostingManager.CreateService(String normalizedVirtualPath, EventTraceActivity eventTraceActivity)
   at System.ServiceModel.ServiceHostingEnvironment.HostingManager.ActivateService(ServiceActivationInfo serviceActivationInfo, EventTraceActivity eventTraceActivity)
   at System.ServiceModel.ServiceHostingEnvironment.HostingManager.EnsureServiceAvailable(String normalizedVirtualPath, EventTraceActivity eventTraceActivity)
   — End of inner exception stack trace —
   at System.ServiceModel.ServiceHostingEnvironment.HostingManager.EnsureServiceAvailable(String normalizedVirtualPath, EventTraceActivity eventTraceActivity)
   at System.ServiceModel.ServiceHostingEnvironment.EnsureServiceAvailableFast(String relativeVirtualPath, EventTraceActivity eventTraceActivity)
Process Name: w3wp
Process ID: 9776
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
The troublesome service is hosted in an &lt;code&gt;ASP.NET&lt;/code&gt; web application and it's preloaded with a custom implementation of &lt;a href="https://msdn.microsoft.com/en-us/library/system.web.hosting.iprocesshostpreloadclient(v=vs.110).aspx"&gt;&lt;code&gt;IProcessHostPreloadClient&lt;/code&gt;&lt;/a&gt; which more or less does what's described in &lt;a href="http://lazynreclined.blogspot.nl/2014/09/enable-autostart-in-iis-75-without.html"&gt;this blog post&lt;/a&gt;.
Since the project hosting the service is using AutoFac as it's DI framework/library the service is setup to use &lt;code&gt;AutofacServiceHostFactory&lt;/code&gt; as the service factory:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &amp;lt;%@ ServiceHost
    Service="AuthorizationServiceImpl, AuthorizationService"
    Factory="Autofac.Integration.Wcf.AutofacServiceHostFactory, Autofac.Integration.Wcf" %&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
After some googling for the error I turned out to the &lt;a href="http://docs.autofac.org/en/latest/integration/wcf.html#was-hosting-and-non-http-activation"&gt;AutoFac documentation page&lt;/a&gt; where I got the first idea of what is happening:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
When hosting WCF Services in WAS (Windows Activation Service), you are not given an opportunity to build your container in the Application&lt;sub&gt;Start&lt;/sub&gt; event defined in your Global.asax because WAS doesn’t use the standard ASP.NET pipeline.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
Ok, great! Now I know that &lt;code&gt;ServiceHostingEnvironment.EnsureServiceAvailable()&lt;/code&gt; method (which is called to activate the service) doesn't use the HTTP pipeline from ASP.NET. A solution to this issue is in the next paragraph of the documentation:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
The alternative approach is to place a code file in your &lt;code&gt;App_Code&lt;/code&gt; folder that contains a type with a &lt;code&gt;public static void AppInitialize()&lt;/code&gt; method.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
And that's what I did. I went to to the project in Visual Studio, added a &lt;code&gt;special ASP.NET folder&lt;/code&gt; named &lt;code&gt;App_Code&lt;/code&gt; and added a class named &lt;code&gt;AppStart&lt;/code&gt; to it with a single method &lt;code&gt;public static void AppInitialize()&lt;/code&gt; which contained all the required bootstrapping logic for AutoFac. I redeployed the application on but the error kept popping and it's after &lt;b&gt;carefully&lt;/b&gt; reading the comments from &lt;a href="https://stackoverflow.com/a/330720/844006"&gt;this StackOverflow answer&lt;/a&gt; and &lt;a href="https://blogs.msdn.microsoft.com/wenlong/2006/01/11/how-to-initialize-hosted-wcf-services/"&gt;this blog post on how to initialize WCF services&lt;/a&gt; I found why the &lt;code&gt;AppInitialize&lt;/code&gt; method wasn't invoked: &lt;b&gt;it was because the &lt;code&gt;AppStart.cs&lt;/code&gt; needs it's build action to be &lt;code&gt;Content&lt;/code&gt; not Compile&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
So when getting the &lt;code&gt;ServiceActivationexception&lt;/code&gt; with the error message &lt;code&gt;The AutofacServiceHost.Container static property must be set before services can be instantiated&lt;/code&gt; make sure to have the following:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;The special ASP.NET folder &lt;code&gt;App_Code&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A class in &lt;code&gt;App_Code&lt;/code&gt; having a method with this signature &lt;code&gt;public static void AppInitialize()&lt;/code&gt; which contains all the required initialization code&lt;/li&gt;
&lt;li&gt;The build action of the file containing the above method is set to &lt;code&gt;Content&lt;/code&gt; as shown in the picture below&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
&lt;img src="https://rebeja.eu/images/appinitialize.png" alt="nil"&gt;
&lt;/p&gt;</description><category>AutoFacServiceHostFactory</category><category>Service Activation</category><category>WCF</category><guid>https://rebeja.eu/posts/serviceactivationexception-autofacservicehostfactory/</guid><pubDate>Wed, 16 May 2018 22:00:00 GMT</pubDate></item><item><title>MediatR - Handler not found error when the DataContext couldn't be initialized</title><link>https://rebeja.eu/posts/mediatr-handler-not-found-error-when-the-datacontext-couldnt-be-initialized/</link><dc:creator>Petru Rebeja</dc:creator><description>&lt;p&gt;
&lt;b&gt;TL;DR&lt;/b&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
If you use MediatR package and it suddenly it fails with &lt;code&gt;Handler was not found for request of type &amp;lt;type&amp;gt;&lt;/code&gt; inspect the dependencies of the handler it fails to create/invoke. One or more of those dependencies (a &lt;code&gt;DbContext&lt;/code&gt; in my case) throws an error when instantiated and the error is making MediatR fail.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;a href="https://jimmybogard.com/"&gt;Jimmy Bogard&lt;/a&gt;s' &lt;a href="https://github.com/jbogard/MediatR"&gt;MediatR&lt;/a&gt; is a little gem of a package I like using because it enables a good separation of business logic from the boilerplate code and provides a clean and structured enforcement of the &lt;a href="https://en.wikipedia.org/wiki/Single_responsibility_principle"&gt;Single Responsibility Principle&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I use this package extensively in &lt;a href="https://rise-tv.net"&gt;one of my outside work projects&lt;/a&gt; (I'm proud to say that it's not a pet project anymore) to delegate requests/commands to their respective request/command handlers. The project itself consists of two parts - an ASP.NET MVC application for public access and back office management and a WebAPI application used for registering payments. In order to keep both Web Application and Web API URLs consistent (and pretty) I have hosted the Web API application as a virtual directory inside the main Web Application.
&lt;/p&gt;

&lt;p&gt;
Recently, after an update of the application the payment module went down (giving me a tiny heart attack). As expected I dove into the application logs and after some thorough search I found the culprit with the following error message:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
An unhandled exception of type 'System.InvalidOperationException' occurred in MediatR.dll Additional information: Handler was not found for request of type GetAuthorizedUserRequest. Container or service locator not configured properly or handlers not registered with your container.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The exception was popping inside the &lt;a href="https://msdn.microsoft.com/en-us/library/system.web.http.authorizeattribute.isauthorized(v=vs.118).aspx"&gt;&lt;code&gt;IsAuthorized&lt;/code&gt;&lt;/a&gt; method of a custom &lt;a href="https://msdn.microsoft.com/en-us/library/system.web.http.authorizeattribute(v=vs.118).aspx"&gt;&lt;code&gt;AuthorizeAttribute&lt;/code&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;protected override bool IsAuthorized(HttpActionContext actionContext)
{
    try
    {
	  var authorizationToken = new AuthorizationToken(actionContext.Request);
	  if (String.IsNullOrEmpty(authorizationToken.Value))
	  {
		return false;
	  }
	  var request = new GetAuthorizedUserRequest
	  {
		AuthorizationToken = authorizationToken.Value
	  };
	  var user = _securityService.GetAuthorizedUser(request);
	  return user != null;
    }
    catch (Exception)
    {
	  return false;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
The first thing to do was to thoroughly inspect what does the IoC container (&lt;code&gt;StructureMap&lt;/code&gt; in my case) has registered. After a glimpse through the output of &lt;code&gt;WhatDoIHave()&lt;/code&gt; method I saw that the handler &lt;code&gt;GetAuthorizedUserRequestHandler&lt;/code&gt; was indeed registered as a &lt;code&gt;IRequestHandler&amp;lt;GetAuthorizedUserRequest, GetAuthorizedUserResponse&amp;gt;&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
So, what is the problem then? The &lt;code&gt;InnerException&lt;/code&gt; property of the exception that was caught was &lt;code&gt;null&lt;/code&gt; and I was stuck.
&lt;/p&gt;

&lt;p&gt;
On the dawn of divine inspiration I decided to comment out the existing constructor of the request handler and create a default one (also return a dummy user). It worked - the exception wasn't thrown and the user got authenticated.
&lt;/p&gt;

&lt;p&gt;
However, the next request (dispatched through MediatR) that had to query something in the database failed which gave me the idea that there must be some issues with the &lt;code&gt;DbContext&lt;/code&gt; initialization (I use Entity Framework).
Sure enough - when I put a breakpoint in the constructor of my &lt;code&gt;DataContext&lt;/code&gt; class (derived from &lt;code&gt;DbContext&lt;/code&gt;) I got an exception mentioning that the key "mssqllocaldb" is missing from &lt;code&gt;&amp;lt;connectionStrings&amp;gt;&lt;/code&gt; section.
&lt;/p&gt;

&lt;p&gt;
Then, I remembered that the latest code update also came with an update of Entity Framework NuGet package and it dawned upon me why the MediatR was failing. As I said in the beginning, the Web API application is hosted under the main Web Application. This means that the &lt;code&gt;&amp;lt;entityFramework&amp;gt;&lt;/code&gt; configuration element in the child application is inherited from the parent one so the &lt;code&gt;Web.config&lt;/code&gt; file of the child application did not contain any section related to Entity Framework.
When I did the upgrade of the NuGet package the installer added the configuration section with default values. Those default and wrong values were read by the &lt;code&gt;DbContext&lt;/code&gt; class constructor and since the values were wrong the constructor failed. After deleting the &lt;code&gt;&amp;lt;entityFramework&amp;gt;&lt;/code&gt; configuration element the application went back online.
&lt;/p&gt;</description><category>error</category><category>handler not found</category><category>MediatR</category><guid>https://rebeja.eu/posts/mediatr-handler-not-found-error-when-the-datacontext-couldnt-be-initialized/</guid><pubDate>Thu, 01 Feb 2018 22:00:00 GMT</pubDate></item><item><title>The common pitfalls of ORM frameworks - RBAR</title><link>https://rebeja.eu/posts/the-common-pitfalls-of-orm-frameworks-rbar/</link><dc:creator>Petru Rebeja</dc:creator><description>&lt;p&gt;
ORM frameworks are a great tool especially for junior developers because they allow bluring the line between the application logic and the data it crunches. Except that the aforementioned line blurring advantage may become a real production issue if not taken in consideration when writing the code.
&lt;/p&gt;

&lt;p&gt;
Let us consider an example. Let's suppose we're working on a (what else?) e-commerce platform. Somewhere in the depts of that platform there is a &lt;code&gt;IOrderService&lt;/code&gt; which exposes the following method:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public interface IOrderService
{
    void PlaceOrder(Guid customerId, IEnumerable&amp;lt;OrderItem&amp;gt; itemIds)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
where &lt;code&gt;OrderItem&lt;/code&gt; holds the data about an ordered item.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class OrderItem
{
    public Guid ItemId { get; set; }

    public int Quantity { get; set; }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
The &lt;code&gt;PlaceOrder&lt;/code&gt; method needs to:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Lookup the &lt;code&gt;Customer&lt;/code&gt; in the database&lt;/li&gt;
&lt;li&gt;Create a new &lt;code&gt;CustomerOrder&lt;/code&gt; instance&lt;/li&gt;
&lt;li&gt;Add each &lt;code&gt;Item&lt;/code&gt; to the order and decrease stock count&lt;/li&gt;
&lt;li&gt;Save the &lt;code&gt;CustomerOrder&lt;/code&gt; in the database&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Of course, since we're using an ORM framework, the classes used by the repositories - &lt;code&gt;Customer&lt;/code&gt;, &lt;code&gt;CustomerOrder&lt;/code&gt; and &lt;code&gt;Item&lt;/code&gt; - are mapped to database tables.
&lt;/p&gt;

&lt;p&gt;
Given the above, someone would be tempted to implement the &lt;code&gt;PlaceOrder&lt;/code&gt; method like this:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public void PlaceOrder(Guid customerId, IEnumerable&amp;lt;OrderItem&amp;gt; orderItems)
{
    var customer = _customerRepository.Get(customerId);
    var order = new CustomerOrder(customer);

    foreach (var orderedItem in orderItems)
    {
	var item = _itemRepository.Get(orderedItem.ItemId);
	item.DecreaseStockCount(orderedItem.Quantity);
	_itemRepository.Update(item);
	order.Add(orderedItem);
    }

    _customerOrderRepository.Register(order);
    _unitOfWork.Commit();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
And why wouldn't they? It seems the most straightforward transposition of the requirements defined above. The code behaves as expected in both Dev and QA environments and afterwards it's promoted to production where lies a database with hundreds of thousands of rows in the &lt;code&gt;Items&lt;/code&gt; table. There also, the behavior is as expected until one day an eager customer wants to buy 980 distinct items (because why not?).
&lt;/p&gt;

&lt;p&gt;
What happens with the code above? It &lt;i&gt;still&lt;/i&gt; works well but the database command times out and the customer cannot place a &lt;b&gt;significant&lt;/b&gt; order.
&lt;/p&gt;

&lt;p&gt;
So what is the problem? Why it times out? Well, because the aforementioned line between application logic and database is blurred enough for the iterative paradigm to creep into the set-based one. In the SQL community this paradigm creep has a name - &lt;a href="https://www.red-gate.com/simple-talk/sql/t-sql-programming/rbar--row-by-agonizing-row/"&gt;Row By Agonizing Row&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
To put it in the context of the example above - &lt;b&gt;it takes more time to do 980 pairs of &lt;code&gt;SELECT&lt;/code&gt; and &lt;code&gt;UPDATE&lt;/code&gt; operations than to do one &lt;code&gt;SELECT&lt;/code&gt; which returns 980 rows followed by one &lt;code&gt;UPDATE&lt;/code&gt; which alters 980 rows&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
So, let's switch the paradigm and start working with collections in our code to minimize the number of operations in the database. The first thing to do is to load all items in bulk instead of loading them one by one. This will reduce the number of &lt;code&gt;SELECT&lt;/code&gt; operations &lt;b&gt;from 980 to 1&lt;/b&gt; (a whooping 50% of the number of operations). We still need to update the stock counts for each item individually because the ORM framework doesn't know how to translate the changes for each item into a single &lt;code&gt;UPDATE&lt;/code&gt; statement but considering that we've halved the total number of operations let's give this approach a try shall we?
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public void PlaceOrder(Guid customerId, IEnumerable&amp;lt;OrderItem&amp;gt; orderItems)
{
    var customer = _customerRepository.Get(customerId);
    var customerOrder = new CustomerOrder(customer);

    var items = itemRepository.Items
	.Join(orderItems,
	      item =&amp;gt; item.Id,
	      orderedItem =&amp;gt; orderedItem.ItemId,
	      (item, _) =&amp;gt; item)
	.ToDictionary(i =&amp;gt; i.Id);

    foreach(var orderedItem in orderedItems)
    {
	var item  = items[orderedItem.ItemId];
	item.DecreaseStockCount(orderedItem.Quantity);
	_itemRepository.Update(item);
	customerOrder.Add(item);
    }

    _customerOrderRepository.Register(order);
    _unitOfWork.Commit();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
This will solve the problem with the timeout but will create another one - useless load on the system. The code loads 980 rows from the database but only uses two attributes of each row - &lt;code&gt;Id&lt;/code&gt; and &lt;code&gt;Barcode&lt;/code&gt;. We might say that this can be solved by projecting an &lt;code&gt;Item&lt;/code&gt; into a tuple of &lt;code&gt;&amp;lt;Barcode, Id&amp;gt;&lt;/code&gt; but this would be a partial solution because we can still place a great burden on system memory by sending an request of 10k items.
Also, there are still 980 &lt;code&gt;UPDATE&lt;/code&gt; statements that need to be executed which is still &lt;b&gt;a lot&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
The best approach to this is to not load any data at all from the database and to do the processing as close to the actual data as possible.
And how can we do that? Exactly - with &lt;code&gt;stored procedures&lt;/code&gt;.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;declare&lt;/span&gt; &lt;span class="k"&gt;procedure&lt;/span&gt; &lt;span class="n"&gt;CreateCustomerOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
	&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;customerId&lt;/span&gt; &lt;span class="n"&gt;uniqueidentifier&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
	&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;orderItems&lt;/span&gt; &lt;span class="n"&gt;udttorderitems&lt;/span&gt; &lt;span class="n"&gt;readonly&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;no_count&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;

    &lt;span class="k"&gt;update&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Count&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Quantity&lt;/span&gt;
    &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;StockCounts&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;
    &lt;span class="k"&gt;join&lt;/span&gt; &lt;span class="n"&gt;Items&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ItemId&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;
    &lt;span class="k"&gt;join&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;orderItems&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ItemId&lt;/span&gt;

    &lt;span class="k"&gt;insert&lt;/span&gt; &lt;span class="k"&gt;into&lt;/span&gt; &lt;span class="n"&gt;CustomerOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CustomerId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OrderDateTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;values&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;customerId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GetDate&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;insert&lt;/span&gt; &lt;span class="k"&gt;into&lt;/span&gt; &lt;span class="n"&gt;OrderLines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OrderId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ItemId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quantity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;scope_identity&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Quantity&lt;/span&gt;
    &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Items&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="k"&gt;join&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;orderItems&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ItemId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
Now, of course in real life situations there won't be a customer that orders almost 1000 items with a single order and the second approach (bulk load items and iterate the collection) will do just fine.
The important thing to keep in mind in such cases is the need to switch from a procedural mindset to a set-based one thus pruning this phenomenon of paradigm creep which can become a full-blown RBAR processing.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Later edit&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
I have created a &lt;a href="https://github.com/RePierre/orm-rbar-example"&gt;GitHub repository&lt;/a&gt; to showcase the first two implemetations of &lt;code&gt;IOrderservice&lt;/code&gt;.
&lt;/p&gt;</description><category>ORM</category><category>pitfalls</category><category>RBAR</category><guid>https://rebeja.eu/posts/the-common-pitfalls-of-orm-frameworks-rbar/</guid><pubDate>Wed, 17 Jan 2018 22:00:00 GMT</pubDate></item><item><title>Python development using Emacs from terminal</title><link>https://rebeja.eu/posts/python-development-using-emacs-from-terminal/</link><dc:creator>Petru Rebeja</dc:creator><description>&lt;p&gt;
A few weeks ago, while working on a hackathon project I found myself very disappointed with my progress.
&lt;/p&gt;

&lt;p&gt;
I had the impression that I can do better but something is holding me back and then I realized that I was too distracted by &lt;code&gt;Alt-Tab&lt;/code&gt;-ing through all open applications, iterating through dozens of open tabs in the browser and spending too much time on websites that were of no use at that time.
&lt;/p&gt;

&lt;p&gt;
At that moment, on a whim I decided to try and eliminate all of these distractions the hard way - &lt;b&gt;by not using the X server at all&lt;/b&gt; (I was working on &lt;a href="https://kubuntu.org/"&gt;Kubuntu&lt;/a&gt;).
&lt;/p&gt;

&lt;p&gt;
Since I was mainly working with Python code and occasionally I would need to open some file for inspection and all of these were done from Emacs I said to myself:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Emacs can be opened from console so why not start working on hackathon from console?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Said and done. &lt;code&gt;Ctrl-Alt-F1&lt;/code&gt; and I was prompted with the TTY cursor. I logged in, started Emacs opened all the required files and started working. All good until I found myself in the situation where I needed to lookup something on the Internet. I knew I could use &lt;code&gt;eww&lt;/code&gt; as a web browser so normally I did so (yeah, I'm one of those people that use Bing instead of Google):
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;M-x eww
Enter URL or keywords: www.bing.com
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
And nothing… Oh, wait, I remember needing to enter some username and password when connecting to the Wi-Fi but I wasn't prompted for those after logging into terminal. How do I connect to the network?
&lt;/p&gt;

&lt;p&gt;
As there was no way for me to find that out without using some sort of GUI (I'm not that good with terminals) I started a new X session, connected from there to Wi-Fi and found this &lt;a href="https://askubuntu.com/a/461831/561980"&gt;StackOverflow answer&lt;/a&gt;. So I logged back to the terminal and from Emacs started &lt;b&gt;eshell&lt;/b&gt; with &lt;code&gt;M-x eshell&lt;/code&gt;. From there I issued the following command
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nmcli c up &amp;lt;wi-fi-name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
which connected me to the Wi-Fi network.
&lt;/p&gt;

&lt;p&gt;
Note: I got connected because on previous sessions I opted to store the credentials for the connection; to get a prompt for username and password for the Wi-Fi use the &lt;code&gt;--ask&lt;/code&gt; parameter like this:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nmcli --ask c up &amp;lt;wi-fi-name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
After connecting I resumed my coding and only at the end of the hackathon I stopped to ponder upon my experience; it wasn't as smooth as I expected. Although I consider a big plus the fact that I was able to issue shell commands within Emacs through &lt;b&gt;eshell&lt;/b&gt; there were some hick-ups along the way.
&lt;/p&gt;

&lt;p&gt;
The first thing I noticed is that under terminal not all shortcuts that are very familiar for me are available. Namely, in &lt;b&gt;org-mode&lt;/b&gt; the combination &lt;code&gt;M-right&lt;/code&gt; which is used for indentation, moving columns within a table and demoting list items is not available; instead I had to use either &lt;code&gt;C-c C-x r&lt;/code&gt; shortcut or explicitly invoke the command using &lt;code&gt;M-x org-meta-right&lt;/code&gt;. Although I did not invoke this command frequently, without the shortcut I felt like I was pulled out of &lt;a href="https://en.wikipedia.org/wiki/Flow_(psychology)"&gt;the flow&lt;/a&gt; each time I had to use an alternative method of invoking the command.
&lt;/p&gt;

&lt;p&gt;
The second and by far the biggest nuisance was the lack of proper web-browsing experience. Although I most frequently landed on StackOverflow pages and although &lt;b&gt;eww&lt;/b&gt; rendered them pretty good (see image below) the lack of visual experience &lt;i&gt;I was used to&lt;/i&gt; gave me a sense of discomfort.
&lt;img src="https://rebeja.eu/images/eww-stackoverflow-2.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
However, when I got to analyze how much I have accomplished while working from terminal I was simply &lt;b&gt;amazed&lt;/b&gt;. Having no distraction and meaningless motion like cycling through windows and tabs had a huge impact on my productivity. I was able to fully concentrate and immerse in the code and by doing so I had &lt;b&gt;a lot&lt;/b&gt; of work done.
&lt;/p&gt;</description><category>Emacs</category><category>Python</category><category>terminal</category><guid>https://rebeja.eu/posts/python-development-using-emacs-from-terminal/</guid><pubDate>Thu, 28 Sep 2017 22:00:00 GMT</pubDate></item></channel></rss>