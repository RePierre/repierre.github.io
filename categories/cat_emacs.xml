<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Rebeja (Posts about Emacs)</title><link>https://blog.rebeja.eu/</link><description></description><atom:link rel="self" type="application/rss+xml" href="https://blog.rebeja.eu/categories/cat_emacs.xml"></atom:link><language>en</language><copyright>Contents Â© 2018 &lt;a href="mailto:petru.rebeja@gmail.com"&gt;Petru Rebeja&lt;/a&gt; </copyright><lastBuildDate>Mon, 03 Dec 2018 14:44:54 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Automating custom workflow in Emacs</title><link>https://blog.rebeja.eu/posts/automating-custom-workflow-in-emacs/</link><dc:creator>Petru Rebeja</dc:creator><description>&lt;p&gt;
Due to the lack of human resources in a research project I'm involved the team decided to take upon itself the semantic comparison of 3000 pairs of papers from the medical domain.
&lt;/p&gt;

&lt;p&gt;
Each paper is a &lt;code&gt;json&lt;/code&gt; file with structured contents of the publication like in the picture below:
&lt;img src="https://blog.rebeja.eu/images/publication-json.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Since we also want to do &lt;span class="underline"&gt;at least some&lt;/span&gt; cross-validation we decided that each member of the team should compare 2000 pairs of publications so that each pair will be compared by two out of three persons from the team.
So we split the 3000 publication pairs into 3 sets which were saved into &lt;code&gt;csv&lt;/code&gt; files with the following structure: &lt;code&gt;file1, file2, similarity_score&lt;/code&gt;; where &lt;code&gt;file1&lt;/code&gt; and &lt;code&gt;file2&lt;/code&gt; are the names of the files and &lt;code&gt;similarity_score&lt;/code&gt; is to be filled with the semantic similarity score.
&lt;/p&gt;

&lt;p&gt;
My first idea was to have Emacs split into three windows to allow for both registering the score and a side-by-side comparison of files:
&lt;img src="https://blog.rebeja.eu/images/comparison-layout.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
For each pair of files from the left window I would:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;Copy the name of the first file using &lt;code&gt;C-a C-SPC C-u 2 M-f M-w&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Go the the top window on the right using &lt;code&gt;C-x o 2&lt;/code&gt; (I'm using &lt;code&gt;ace-window&lt;/code&gt; thus after pressing &lt;code&gt;C-x o&lt;/code&gt; I can select the window to switch to by pressing it's number key)
&lt;/li&gt;
&lt;li&gt;Open the file using &lt;code&gt;C-x C-f&lt;/code&gt; then navigating to the directory and yanking the file name at the end
&lt;/li&gt;
&lt;li&gt;Move back to the first window using &lt;code&gt;C-x o 1&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Copy the name of the second file by first moving over the first comma with &lt;code&gt;C-f&lt;/code&gt; then &lt;code&gt;C-u 2 M-f M-w&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Go to the bottom window on the right using &lt;code&gt;C-x o 3&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Repeat step 3
&lt;/li&gt;
&lt;li&gt;Repeat step 4
&lt;/li&gt;
&lt;li&gt;Compare publications and register score in &lt;code&gt;similarity_score&lt;/code&gt; column
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Although this workflow seems quite laborious due to so many steps I've gotten used quite rapidly (from the second pair) to it and managed to form some sort of temporary muscle memory for opening files in the sense that I was doing that on full auto-pilot, &lt;i&gt;without thinking that I'm opening files&lt;/i&gt;.
&lt;/p&gt;

&lt;p&gt;
However, there was a problem with this workflow: the directory in which the files to be compared are located contains around 100 K such &lt;code&gt;json&lt;/code&gt; files and on my 5400 RPM hard-disk it took what seemed like forever to scan the directory when pressing &lt;code&gt;C-x C-f&lt;/code&gt; in order to give me the benefit of autocompletion which I did not need because I &lt;i&gt;already knew the files names&lt;/i&gt;. So basically for each pair of publications I was stuck waiting twice for the directory to be scanned.
&lt;/p&gt;

&lt;p&gt;
And then I got an idea: &lt;b&gt;I already knew the file names; the directory containing them is the same so wouldn't it be faster to send the full path (obtained by concatenating file name and directory path) to &lt;code&gt;find-file&lt;/code&gt; function instead of waiting for a directory scan?&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
I switched to the &lt;code&gt;*scratch*&lt;/code&gt; buffer and evaluated a &lt;code&gt;find-file&lt;/code&gt; call with the full path of a file and of course, the file was loaded instantly.
&lt;/p&gt;

&lt;p&gt;
So I decided to take it a bit further: &lt;b&gt;Can't I, while on a line in left window open the files on that line in the other two windows?&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
Of course I can because &lt;b&gt;Emacs is awesome&lt;/b&gt;. All I need to do is write some code lisp code that will do what I want.
&lt;/p&gt;

&lt;p&gt;
Fisrt things first, I declared a (global) variable to hold the full path to the directory containing the files:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defvar&lt;/span&gt; &lt;span class="nv"&gt;*compare-publications-dir*&lt;/span&gt;
  &lt;span class="s"&gt;"&amp;lt;directory-path&amp;gt;"&lt;/span&gt;
  &lt;span class="s"&gt;"The location of files to compare."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
Then I created a function to get the whole line from the &lt;code&gt;csv&lt;/code&gt; file:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;get-current-line&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;progn&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;beginning-of-visual-line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;end-of-visual-line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;buffer-substring-no-properties&lt;/span&gt; &lt;span class="nv"&gt;start&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
This function moves the point to the beginning of the line by calling &lt;code&gt;(beginning-of-visual-line)&lt;/code&gt; then saves the position in a local variable &lt;code&gt;start&lt;/code&gt; and moves to the end of the line via a call to &lt;code&gt;(end-of-visual-line)&lt;/code&gt;. In the end it returns the substring which is between &lt;code&gt;start&lt;/code&gt; position and the position returned by &lt;code&gt;(point)&lt;/code&gt; function.
&lt;/p&gt;

&lt;p&gt;
Having the line of text I need to:
a) Split the line by ~,~
b) Store first and second parts of the line into two variables called &lt;code&gt;file-1&lt;/code&gt; and &lt;code&gt;file-2&lt;/code&gt;
c) Move to the top-right window
d) Concatenate the values of &lt;code&gt;*compare-publications-dir*&lt;/code&gt; and &lt;code&gt;file-1&lt;/code&gt; and pass the result to &lt;code&gt;(find-file-readonly)&lt;/code&gt; (I don't want to accidentally change the files being compared)
e) Move to the bottom-right window
f) Repeat d) with &lt;code&gt;file-2&lt;/code&gt; instead of &lt;code&gt;file-1&lt;/code&gt;
g) Return to the left window
&lt;/p&gt;

&lt;p&gt;
This was also implemented with a function which can be called interactively via &lt;code&gt;M-x&lt;/code&gt;:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;compare-publications&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let* &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;files&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;csv-split-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-current-line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;","&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file-1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;car &lt;/span&gt;&lt;span class="nv"&gt;files&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file-2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;car &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cdr &lt;/span&gt;&lt;span class="nv"&gt;files&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;other-window&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;find-file-read-only&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="nv"&gt;*compare-publications-dir*&lt;/span&gt; &lt;span class="nv"&gt;file-1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;other-window&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;find-file-read-only&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="nv"&gt;*compare-publications-dir*&lt;/span&gt; &lt;span class="nv"&gt;file-2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;other-window&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And that's it. After calling &lt;code&gt;eval&lt;/code&gt; on the functions above I have an automated workflow. Now, to compare two files, I just navigate to a line in the &lt;code&gt;csv&lt;/code&gt; file and from there type &lt;code&gt;M-x compare-publications&lt;/code&gt;. The only thing left to do manually (beside the comparison itself) is to press the key for the &lt;code&gt;similarity_score&lt;/code&gt; of files from that line.
&lt;/p&gt;</description><category>automation</category><category>awesome</category><category>custom workflow</category><category>Emacs</category><guid>https://blog.rebeja.eu/posts/automating-custom-workflow-in-emacs/</guid><pubDate>Sat, 02 Jun 2018 22:00:00 GMT</pubDate></item><item><title>Python development using Emacs from terminal</title><link>https://blog.rebeja.eu/posts/python-development-using-emacs-from-terminal/</link><dc:creator>Petru Rebeja</dc:creator><description>&lt;p&gt;
A few weeks ago, while working on a hackathon project I found myself very disappointed with my progress.
&lt;/p&gt;

&lt;p&gt;
I had the impression that I can do better but something is holding me back and then I realized that I was too distracted by &lt;code&gt;Alt-Tab&lt;/code&gt;-ing through all open applications, iterating through dozens of open tabs in the browser and spending too much time on websites that were of no use at that time.
&lt;/p&gt;

&lt;p&gt;
At that moment, on a whim I decided to try and eliminate all of these distractions the hard way - &lt;b&gt;by not using the X server at all&lt;/b&gt; (I was working on &lt;a href="https://kubuntu.org/"&gt;Kubuntu&lt;/a&gt;).
&lt;/p&gt;

&lt;p&gt;
Since I was mainly working with Python code and occasionally I would need to open some file for inspection and all of these were done from Emacs I said to myself:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Emacs can be opened from console so why not start working on hackathon from console?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Said and done. &lt;code&gt;Ctrl-Alt-F1&lt;/code&gt; and I was prompted with the TTY cursor. I logged in, started Emacs opened all the required files and started working. All good until I found myself in the situation where I needed to lookup something on the Internet. I knew I could use &lt;code&gt;eww&lt;/code&gt; as a web browser so normally I did so (yeah, I'm one of those people that use Bing instead of Google):
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;M-x eww
Enter URL or keywords: www.bing.com
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
And nothingâ¦ Oh, wait, I remember needing to enter some username and password when connecting to the Wi-Fi but I wasn't prompted for those after logging into terminal. How do I connect to the network?
&lt;/p&gt;

&lt;p&gt;
As there was no way for me to find that out without using some sort of GUI (I'm not that good with terminals) I started a new X session, connected from there to Wi-Fi and found this &lt;a href="https://askubuntu.com/a/461831/561980"&gt;StackOverflow answer&lt;/a&gt;. So I logged back to the terminal and from Emacs started &lt;b&gt;eshell&lt;/b&gt; with &lt;code&gt;M-x eshell&lt;/code&gt;. From there I issued the following command
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nmcli c up &amp;lt;wi-fi-name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
which connected me to the Wi-Fi network.
&lt;/p&gt;

&lt;p&gt;
Note: I got connected because on previous sessions I opted to store the credentials for the connection; to get a prompt for username and password for the Wi-Fi use the &lt;code&gt;--ask&lt;/code&gt; parameter like this:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nmcli --ask c up &amp;lt;wi-fi-name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
After connecting I resumed my coding and only at the end of the hackathon I stopped to ponder upon my experience; it wasn't as smooth as I expected. Although I consider a big plus the fact that I was able to issue shell commands within Emacs through &lt;b&gt;eshell&lt;/b&gt; there were some hick-ups along the way.
&lt;/p&gt;

&lt;p&gt;
The first thing I noticed is that under terminal not all shortcuts that are very familiar for me are available. Namely, in &lt;b&gt;org-mode&lt;/b&gt; the combination &lt;code&gt;M-right&lt;/code&gt; which is used for indentation, moving columns within a table and demoting list items is not available; instead I had to use either &lt;code&gt;C-c C-x r&lt;/code&gt; shortcut or explicitly invoke the command using &lt;code&gt;M-x org-meta-right&lt;/code&gt;. Although I did not invoke this command frequently, without the shortcut I felt like I was pulled out of &lt;a href="https://en.wikipedia.org/wiki/Flow_(psychology)"&gt;the flow&lt;/a&gt; each time I had to use an alternative method of invoking the command.
&lt;/p&gt;

&lt;p&gt;
The second and by far the biggest nuisance was the lack of proper web-browsing experience. Although I most frequently landed on StackOverflow pages and although &lt;b&gt;eww&lt;/b&gt; rendered them pretty good (see image below) the lack of visual experience &lt;i&gt;I was used to&lt;/i&gt; gave me a sense of discomfort.
&lt;img src="https://blog.rebeja.eu/images/eww-stackoverflow-2.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
However, when I got to analyze how much I have accomplished while working from terminal I was simply &lt;b&gt;amazed&lt;/b&gt;. Having no distraction and meaningless motion like cycling through windows and tabs had a huge impact on my productivity. I was able to fully concentrate and immerse in the code and by doing so I had &lt;b&gt;a lot&lt;/b&gt; of work done.
&lt;/p&gt;</description><category>Emacs</category><category>Python</category><category>terminal</category><guid>https://blog.rebeja.eu/posts/python-development-using-emacs-from-terminal/</guid><pubDate>Thu, 28 Sep 2017 22:00:00 GMT</pubDate></item><item><title>Rename multiple files with Emacs dired</title><link>https://blog.rebeja.eu/posts/rename-multiple-files-with-emacs-dired/</link><dc:creator>Petru Rebeja</dc:creator><description>&lt;p&gt;
While adding text files from within a folder to a project file I noticed that the files in the folder were lacking naming consistency. Namely, there were files which had the &lt;code&gt;.txt&lt;/code&gt; extension and files without extension, as shown in the image below:
&lt;img src="https://blog.rebeja.eu/images/emacs-dired-files-without-extension.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Since there were about 100 files without extension I started asking myself: &lt;b&gt;Is there a way to add .txt extension to those files without manually renaming each one&lt;/b&gt;?
&lt;/p&gt;

&lt;p&gt;
Of course there is. Here's what I did using Emacs and &lt;code&gt;dired&lt;/code&gt;:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;M-x dired&lt;/code&gt; to the desired directory (obviously)
&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;dired&lt;/code&gt; buffer enter the &lt;b&gt;edit mode&lt;/b&gt; with &lt;code&gt;C-x C-q&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Go to the last file that has extension before the block of files without extension.
&lt;/li&gt;
&lt;li&gt;Starting from that file, place a mark and select the whole block of files without extension (the selection should include the last file with extension).
&lt;/li&gt;
&lt;li&gt;Narrow to the selected region using &lt;code&gt;M-x narrow-to-region&lt;/code&gt; or &lt;code&gt;C-x n n&lt;/code&gt; The buffer should look like the image below:
&lt;img src="https://blog.rebeja.eu/images/emacs-dired-narrowed.png" alt="nil"&gt;
&lt;/li&gt;
&lt;li&gt;Move to the beginning of buffer using &lt;code&gt;M-&amp;lt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Start defining a new keyboard macro using &lt;code&gt;C-x (&lt;/code&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Move to next line using &lt;code&gt;C-n&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Navigate to the end of line using &lt;code&gt;C-e&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Add the &lt;code&gt;.txt&lt;/code&gt; extension
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Save the macro with &lt;code&gt;C-x )&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Now that I have a macro to add &lt;code&gt;.txt&lt;/code&gt; extension to a file name I just need to run it as many times as there are unnamed files (100 in my case). To do so just &lt;code&gt;C-u 100 F4&lt;/code&gt;. This will repeat the macro 100 times.
&lt;/li&gt;
&lt;li&gt;Once all the files are renamed exit the &lt;b&gt;narrow-region&lt;/b&gt; using &lt;code&gt;M-x widen&lt;/code&gt; or &lt;code&gt;C-x n w&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Save changes with &lt;code&gt;C-c C-c&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
That's it!
&lt;/p&gt;</description><category>dired</category><category>Emacs</category><category>rename multiple files</category><guid>https://blog.rebeja.eu/posts/rename-multiple-files-with-emacs-dired/</guid><pubDate>Mon, 21 Aug 2017 22:00:00 GMT</pubDate></item><item><title>Managing bibliography using Emacs Org-Mode and Org-Ref</title><link>https://blog.rebeja.eu/posts/managing-bibliography-using-emacs-org-mode-and-org-ref/</link><dc:creator>Petru Rebeja</dc:creator><description>&lt;p&gt;
Since I've started to use Emacs more and more I started wondering whether I can use org-mode to keep a reading list/bibliography?
&lt;/p&gt;

&lt;p&gt;
A quick search led me to this &lt;a href="http://blog.modelworks.ch/"&gt;blog post&lt;/a&gt; where the author was presenting his setup for the same thing. However, after reading into the post I saw that the author
uses a combination of tasks and a reading list which requires custom code to be executed and is too complex for my needs.
&lt;/p&gt;

&lt;p&gt;
All I want is a simple list that:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;should be available on multiple workstations
&lt;/li&gt;
&lt;li&gt;can be built/managed with out-of-the-shelf components and without much effort
&lt;/li&gt;
&lt;li&gt;should allow me to change the status of an entry.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I did however liked the idea of using references to the papers being read and since I recently saw a &lt;a href="https://www.youtube.com/watch?v=JyvpSVl4_dg"&gt;YouTube video&lt;/a&gt; presenting &lt;code&gt;org-ref&lt;/code&gt; I thought I should give it a try.
&lt;/p&gt;

&lt;p&gt;
To handle the availability part I decided to use Dropbox which is also suggested by &lt;code&gt;org-ref&lt;/code&gt;.
&lt;/p&gt;
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Setup org-ref&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
&lt;code&gt;org-ref&lt;/code&gt; is available on &lt;a href="http://melpa.org/"&gt;Melpa&lt;/a&gt; so to install it just type &lt;code&gt;M-x package-install org-ref&lt;/code&gt;. Afterwards copy the code below to your init file and adjust the paths:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;reftex-default-bibliography&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"~/Dropbox/bibliography/references.bib"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;;; see org-ref for use of these variables&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-ref-bibliography-notes&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/bibliography/notes.org"&lt;/span&gt;
      &lt;span class="nv"&gt;org-ref-default-bibliography&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"~/Dropbox/bibliography/references.bib"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nv"&gt;org-ref-pdf-directory&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/bibliography/bibtex-pdfs/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;bibtex-completion-bibliography&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/bibliography/references.bib"&lt;/span&gt;
      &lt;span class="nv"&gt;bibtex-completion-library-path&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/bibliography/bibtex-pdfs"&lt;/span&gt;
      &lt;span class="nv"&gt;bibtex-completion-notes-path&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/bibliography/helm-bibtex-notes"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Creating the reading list&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
With &lt;code&gt;org-ref&lt;/code&gt; in place, it was time to setup the reading list so I created a new file named &lt;code&gt;reading-list.org&lt;/code&gt; under &lt;code&gt;~/Dropbox/bibliography/&lt;/code&gt; with the following header:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#+TITLE: Reading list&lt;/span&gt;
&lt;span class="c1"&gt;#+STATUS: "Maybe" "Pending" "Reading" "Finished" ""&lt;/span&gt;
&lt;span class="c1"&gt;#+COLUMNS: %120ITEM %STATUS&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
The first line obviously defines the title of the document. The second line defines the values for status where:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;Maybe&lt;/code&gt; means that reading the entry is optional
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pending&lt;/code&gt; - the entry will be read sometime after finishing the item that I'm currently reading
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Reading&lt;/code&gt; - the item currently being read
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Finished&lt;/code&gt; - the entries that are already read.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;Adding an entry to the list&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Add &lt;code&gt;bibtex&lt;/code&gt; entry in &lt;code&gt;references.bib&lt;/code&gt; file. E.g.:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@inproceedings&lt;span class="o"&gt;{&lt;/span&gt;le2014distributed,
  &lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="o"&gt;={&lt;/span&gt;Distributed representations of sentences and documents&lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="nv"&gt;author&lt;/span&gt;&lt;span class="o"&gt;={&lt;/span&gt;Le, Quoc and Mikolov, Tomas&lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="nv"&gt;booktitle&lt;/span&gt;&lt;span class="o"&gt;={&lt;/span&gt;Proceedings of the 31st International Conference on Machine Learning &lt;span class="o"&gt;(&lt;/span&gt;ICML-14&lt;span class="o"&gt;)}&lt;/span&gt;,
  &lt;span class="nv"&gt;pages&lt;/span&gt;&lt;span class="o"&gt;={&lt;/span&gt;&lt;span class="m"&gt;1188&lt;/span&gt;--1196&lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="nv"&gt;year&lt;/span&gt;&lt;span class="o"&gt;={&lt;/span&gt;&lt;span class="m"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;reading-list.org&lt;/code&gt; file add the title to the list using &lt;code&gt;M-return&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;Status&lt;/code&gt; and &lt;code&gt;Source&lt;/code&gt; properties
&lt;ul class="org-ul"&gt;
&lt;li&gt;With the cursor on the header:
&lt;ul class="org-ul"&gt;
&lt;li&gt;Press &lt;code&gt;C-c C-x p&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Select or write &lt;code&gt;Status&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Press return
&lt;/li&gt;
&lt;li&gt;Select the value for status (e. g. &lt;code&gt;Pending&lt;/code&gt;)
&lt;/li&gt;
&lt;li&gt;Press return
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;With the cursor on the header:
&lt;ul class="org-ul"&gt;
&lt;li&gt;Press &lt;code&gt;C-c C-x p&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Write or select &lt;code&gt;Source&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Press return
&lt;/li&gt;
&lt;li&gt;If you know the citation key (le2014distributed in the example above) then you can write directly &lt;code&gt;cite:le2014distributed&lt;/code&gt;; otherwise, leave the value for &lt;code&gt;Source&lt;/code&gt; empty and put the cursor after the property declaration. Then, press &lt;code&gt;C-c ]&lt;/code&gt; and select the entry from the reference list.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Repeat the steps above and you should end up with a list like this:
&lt;img src="https://blog.rebeja.eu/images/emacs-reading-list.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;Change the status of an entry&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
To change the status of an entry:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Navigate to the desired entry
&lt;/li&gt;
&lt;li&gt;Repeat the steps above for setting the &lt;code&gt;Status&lt;/code&gt; property and select the proper value for &lt;code&gt;Status&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;Status overview&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
After creating the list you may want to have an overview of the status for each entry. This can be achieved using &lt;code&gt;Org Column View&lt;/code&gt;.
The setup for column view is in the third line of the header
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#+COLUMNS: %120ITEM %STATUS&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
which tells org-mode how to display the entries. Namely, we're defining two columns:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;b&gt;Item&lt;/b&gt; which will display the heading on 120 characters and
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Status&lt;/b&gt; which will take as much space as needed to display the status
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-5-1" class="outline-3"&gt;
&lt;h3 id="sec-5-1"&gt;Switching to column view&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-5-1"&gt;
&lt;p&gt;
To switch to column view, place the cursor outside the headings and press &lt;code&gt;C-c C-x C-c&lt;/code&gt; (or &lt;code&gt;M-x org-columns&lt;/code&gt;). The list should look like the image below:
&lt;img src="https://blog.rebeja.eu/images/emacs-reading-list-column-view.png" alt="nil"&gt;
If your cursor was on a heading when pressing &lt;code&gt;C-c C-x C-c&lt;/code&gt; (invoking &lt;code&gt;org-columns&lt;/code&gt;) then the column view will be activated only for the selected heading.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-5-2" class="outline-3"&gt;
&lt;h3 id="sec-5-2"&gt;Exiting column view&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-5-2"&gt;
&lt;p&gt;
To exit column view position the cursor on a heading that is currently in column view and press &lt;code&gt;q&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
That's it. Happy reading!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-6" class="outline-2"&gt;
&lt;h2 id="sec-6"&gt;References&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;a href="https://github.com/jkitchin/org-ref/blob/master/org-ref.org#start-of-content"&gt;The org-ref manual&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.modelworks.ch/managing-papers-with-org-mode-and-reftex/"&gt;Managing papers with Org-Mode and RefTex&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://orgmode.org/org.html#Defining-columns"&gt;Org Manual - Defining columns&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>bibliography</category><category>Emacs</category><category>org-ref</category><category>reading list</category><guid>https://blog.rebeja.eu/posts/managing-bibliography-using-emacs-org-mode-and-org-ref/</guid><pubDate>Fri, 28 Jul 2017 22:00:00 GMT</pubDate></item><item><title>Use Emacs sql-mode to connect to database on a Docker image</title><link>https://blog.rebeja.eu/posts/use-emacs-sql-mode-to-connect-to-database-on-a-docker-image/</link><dc:creator>Petru Rebeja</dc:creator><description>&lt;p&gt;
While working on a project I had to load and process some resources from a MySQL database. I had a database dump and all I needed was to &lt;code&gt;sudo apt-get install mysql&lt;/code&gt; but I decided against it because that would just bloat my OS with software used only once and drain my laptop battery with the service running in the background.
&lt;/p&gt;

&lt;p&gt;
Instead, I decided to restore the database on a Docker image for MySQL and query the data using &lt;code&gt;mysql-client&lt;/code&gt;.
&lt;/p&gt;
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Install &lt;code&gt;mysql-client&lt;/code&gt; locally&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
This one is simple; just run:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install mysql-client
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Install Docker on Ubuntu&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
The first thing to do is to head to &lt;a href="https://docs.docker.com/engine/installation/linux/ubuntu/#install-docker"&gt;Docker documentation&lt;/a&gt; for instalation instructions which I've copied here:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Install packages to allow &lt;code&gt;apt&lt;/code&gt; to use a repository over HTTPS:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install &lt;span class="se"&gt;\&lt;/span&gt;
    apt-transport-https &lt;span class="se"&gt;\&lt;/span&gt;
    ca-certificates &lt;span class="se"&gt;\&lt;/span&gt;
    curl &lt;span class="se"&gt;\&lt;/span&gt;
    software-properties-common
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Add the official GPG key for Docker
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -fsSL https://download.docker.com/linux/ubuntu/gpg &lt;span class="p"&gt;|&lt;/span&gt; sudo apt-key add -
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Setup the &lt;b&gt;stable&lt;/b&gt; repository. Make sure to select the proper architecture; in my case it's &lt;code&gt;amd64&lt;/code&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo add-apt-repository &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="s2"&gt;"deb [arch=amd64] https://download.docker.com/linux/ubuntu \&lt;/span&gt;
&lt;span class="s2"&gt;    &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;lsb_release -cs&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; \&lt;/span&gt;
&lt;span class="s2"&gt;    stable"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Update the package index
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Install Docker
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install docker-ce
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;Restore MySQL database to a Docker container&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Download the Docker image for &lt;code&gt;MySQL&lt;/code&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker pull mysql
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Create an empty database
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker run --name &amp;lt;container-name&amp;gt; -e &lt;span class="nv"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;password&amp;gt; -e &lt;span class="nv"&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;db-name&amp;gt; -d mysql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
This will create a new container with an empty database and login &lt;code&gt;root&lt;/code&gt;.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Restore database from dump
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker &lt;span class="nb"&gt;exec&lt;/span&gt; -i &amp;lt;container-name&amp;gt; mysql -u&amp;lt;user-name&amp;gt; -p&amp;lt;password&amp;gt; --database&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;db-name&amp;gt; &amp;lt; &amp;lt;path-to-sql-file&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
Notes:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;Make sure that there is no space between &lt;code&gt;-u&lt;/code&gt; and &lt;code&gt;&amp;lt;user-name&amp;gt;&lt;/code&gt;, e.g. for user &lt;code&gt;root&lt;/code&gt; the option should be &lt;code&gt;-uroot&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The same goes for password - e.g. if password is &lt;code&gt;my-secret&lt;/code&gt; then the option should be &lt;code&gt;-pmy-secret&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path-to-sql-file&lt;/code&gt; should point to a file on host OS
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;Connect to MySQL database running on Docker container from Emacs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;First, start the container &lt;code&gt;sudo docker start &amp;lt;container-name&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Get the IP Address of the container
&lt;/li&gt;
&lt;li&gt;Get the container configuration using &lt;code&gt;sudo docker inspect &amp;lt;container-name&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Copy the IP Address from the output under &lt;code&gt;NetworkSettings/IPAddress&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;In Emacs execute &lt;code&gt;M-x sql-mysql&lt;/code&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;For &lt;code&gt;User:&lt;/code&gt; enter the value for &lt;code&gt;&amp;lt;user-name&amp;gt;&lt;/code&gt; (&lt;code&gt;root&lt;/code&gt; is the default)
&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;Password:&lt;/code&gt; enter the value for &lt;code&gt;&amp;lt;password&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;Database:&lt;/code&gt; enter the value for &lt;code&gt;&amp;lt;db-name&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;Server:&lt;/code&gt; enter the IP Address from 2.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
That's it. Happy querying!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>Docker</category><category>Emacs</category><category>sql-mode</category><guid>https://blog.rebeja.eu/posts/use-emacs-sql-mode-to-connect-to-database-on-a-docker-image/</guid><pubDate>Tue, 20 Jun 2017 22:00:00 GMT</pubDate></item><item><title>Editing remote files over ssh with Emacs and Tramp mode</title><link>https://blog.rebeja.eu/posts/editing-remote-files-over-ssh-with-emacs-and-tramp-mode/</link><dc:creator>Petru Rebeja</dc:creator><description>&lt;p&gt;
In a discussion over a beer, a friend of mine asked whether I know a way to edit remote files over &lt;code&gt;ssh&lt;/code&gt;? It was then that I realized that my long time obsession with Emacs is starting to pay off and I gave him the only way I know how to do that: &lt;b&gt;Emacs and &lt;a href="https://www.emacswiki.org/emacs/TrampMode"&gt;Tramp Mode&lt;/a&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
This is how I do it.
&lt;/p&gt;
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Setup&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I use &lt;code&gt;Emacs 25.2&lt;/code&gt; on Kubuntu 17.04 and on Windows 10 using &lt;a href="http://cygwin.com/"&gt;Cygwin&lt;/a&gt; and when working with remote files both systems behave the same.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;The flow&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;Configure the remote machine to authenticate you with a key file as specified in this &lt;a href="https://askubuntu.com/a/20921/561980"&gt;stackoverflow answer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Start Emacs
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
To open the remote file for editing invoke the &lt;code&gt;find-file&lt;/code&gt; command either using &lt;code&gt;C-x C-f&lt;/code&gt; (&lt;code&gt;C = Ctrl&lt;/code&gt;) or with &lt;code&gt;M-x find-file&lt;/code&gt; (&lt;code&gt;M=Alt&lt;/code&gt;) and at the file prompt specify the path in the following format:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ssh:user@ip&lt;span class="o"&gt;[&lt;/span&gt;:port&lt;span class="o"&gt;]&lt;/span&gt;:path/to/file
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;An example&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
To exemplify let's consider the following scenario: I have a virtual machine with the IP &lt;code&gt;192.168.13.13&lt;/code&gt; to which I can connect remotely with &lt;code&gt;ssh&lt;/code&gt; using the username &lt;code&gt;petru&lt;/code&gt; and the default public key (&lt;b&gt;~/.ssh/id&lt;sub&gt;rsa&lt;/sub&gt;.pub&lt;/b&gt;). On that machine I want to edit the file &lt;code&gt;/home/petru/src/debugutils.py&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
To do so, I open the file as usually in Emacs using &lt;code&gt;C-x C-f&lt;/code&gt; and at the prompt (the minibuffer) I enter the following:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ssh:petru@192.168.13.13:/home/petru/src/debugutils.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
and press &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>Emacs</category><category>remote files</category><category>ssh</category><category>tramp</category><guid>https://blog.rebeja.eu/posts/editing-remote-files-over-ssh-with-emacs-and-tramp-mode/</guid><pubDate>Sun, 14 May 2017 22:00:00 GMT</pubDate></item></channel></rss>